
ModbusRTU_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000d10  00000da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080015e  0080015e  00000e02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001664  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000930  00000000  00000000  000025fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000839  00000000  00000000  00002f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000028c  00000000  00000000  00003764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000527  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a0  00000000  00000000  00003f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000046b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	be 00       	.word	0x00be	; ????
  6a:	10 01       	movw	r2, r0
  6c:	10 01       	movw	r2, r0
  6e:	10 01       	movw	r2, r0
  70:	10 01       	movw	r2, r0
  72:	10 01       	movw	r2, r0
  74:	10 01       	movw	r2, r0
  76:	10 01       	movw	r2, r0
  78:	be 00       	.word	0x00be	; ????
  7a:	10 01       	movw	r2, r0
  7c:	10 01       	movw	r2, r0
  7e:	10 01       	movw	r2, r0
  80:	10 01       	movw	r2, r0
  82:	10 01       	movw	r2, r0
  84:	10 01       	movw	r2, r0
  86:	10 01       	movw	r2, r0
  88:	c0 00       	.word	0x00c0	; ????
  8a:	10 01       	movw	r2, r0
  8c:	10 01       	movw	r2, r0
  8e:	10 01       	movw	r2, r0
  90:	10 01       	movw	r2, r0
  92:	10 01       	movw	r2, r0
  94:	10 01       	movw	r2, r0
  96:	10 01       	movw	r2, r0
  98:	10 01       	movw	r2, r0
  9a:	10 01       	movw	r2, r0
  9c:	10 01       	movw	r2, r0
  9e:	10 01       	movw	r2, r0
  a0:	10 01       	movw	r2, r0
  a2:	10 01       	movw	r2, r0
  a4:	10 01       	movw	r2, r0
  a6:	10 01       	movw	r2, r0
  a8:	c0 00       	.word	0x00c0	; ????
  aa:	10 01       	movw	r2, r0
  ac:	10 01       	movw	r2, r0
  ae:	10 01       	movw	r2, r0
  b0:	10 01       	movw	r2, r0
  b2:	10 01       	movw	r2, r0
  b4:	10 01       	movw	r2, r0
  b6:	10 01       	movw	r2, r0
  b8:	10 01       	movw	r2, r0
  ba:	10 01       	movw	r2, r0
  bc:	10 01       	movw	r2, r0
  be:	10 01       	movw	r2, r0
  c0:	10 01       	movw	r2, r0
  c2:	10 01       	movw	r2, r0
  c4:	10 01       	movw	r2, r0
  c6:	10 01       	movw	r2, r0
  c8:	0c 01       	movw	r0, r24
  ca:	10 01       	movw	r2, r0
  cc:	10 01       	movw	r2, r0
  ce:	10 01       	movw	r2, r0
  d0:	10 01       	movw	r2, r0
  d2:	10 01       	movw	r2, r0
  d4:	10 01       	movw	r2, r0
  d6:	10 01       	movw	r2, r0
  d8:	e9 00       	.word	0x00e9	; ????
  da:	10 01       	movw	r2, r0
  dc:	10 01       	movw	r2, r0
  de:	10 01       	movw	r2, r0
  e0:	10 01       	movw	r2, r0
  e2:	10 01       	movw	r2, r0
  e4:	10 01       	movw	r2, r0
  e6:	10 01       	movw	r2, r0
  e8:	10 01       	movw	r2, r0
  ea:	10 01       	movw	r2, r0
  ec:	10 01       	movw	r2, r0
  ee:	10 01       	movw	r2, r0
  f0:	10 01       	movw	r2, r0
  f2:	10 01       	movw	r2, r0
  f4:	10 01       	movw	r2, r0
  f6:	10 01       	movw	r2, r0
  f8:	dd 00       	.word	0x00dd	; ????
  fa:	10 01       	movw	r2, r0
  fc:	10 01       	movw	r2, r0
  fe:	10 01       	movw	r2, r0
 100:	10 01       	movw	r2, r0
 102:	10 01       	movw	r2, r0
 104:	10 01       	movw	r2, r0
 106:	10 01       	movw	r2, r0
 108:	fb 00       	.word	0x00fb	; ????

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e0 e1       	ldi	r30, 0x10	; 16
 11e:	fd e0       	ldi	r31, 0x0D	; 13
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	ae 35       	cpi	r26, 0x5E	; 94
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	ae e5       	ldi	r26, 0x5E	; 94
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a9 36       	cpi	r26, 0x69	; 105
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <main>
 140:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 162:	80 91 b9 00 	lds	r24, 0x00B9
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	38 97       	sbiw	r30, 0x08	; 8
 16c:	e1 35       	cpi	r30, 0x51	; 81
 16e:	f1 05       	cpc	r31, r1
 170:	08 f0       	brcs	.+2      	; 0x174 <__vector_24+0x2c>
 172:	56 c0       	rjmp	.+172    	; 0x220 <__vector_24+0xd8>
 174:	ec 5c       	subi	r30, 0xCC	; 204
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	0c 94 8b 03 	jmp	0x716	; 0x716 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 17c:	10 92 5e 01 	sts	0x015E, r1
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 180:	e0 91 5e 01 	lds	r30, 0x015E
 184:	80 91 60 01 	lds	r24, 0x0160
 188:	e8 17       	cp	r30, r24
 18a:	70 f4       	brcc	.+28     	; 0x1a8 <__vector_24+0x60>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	8e 0f       	add	r24, r30
 190:	80 93 5e 01 	sts	0x015E, r24
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ef 59       	subi	r30, 0x9F	; 159
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	80 81       	ld	r24, Z
 19c:	80 93 bb 00 	sts	0x00BB, r24
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1a0:	85 e8       	ldi	r24, 0x85	; 133
 1a2:	80 93 bc 00 	sts	0x00BC, r24
 1a6:	43 c0       	rjmp	.+134    	; 0x22e <__vector_24+0xe6>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 1a8:	80 91 5f 01 	lds	r24, 0x015F
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 93 5f 01 	sts	0x015F, r24
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1b2:	84 e9       	ldi	r24, 0x94	; 148
 1b4:	80 93 bc 00 	sts	0x00BC, r24
 1b8:	3a c0       	rjmp	.+116    	; 0x22e <__vector_24+0xe6>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 1ba:	e0 91 5e 01 	lds	r30, 0x015E
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	8e 0f       	add	r24, r30
 1c2:	80 93 5e 01 	sts	0x015E, r24
 1c6:	80 91 bb 00 	lds	r24, 0x00BB
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ef 59       	subi	r30, 0x9F	; 159
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 1d2:	20 91 5e 01 	lds	r18, 0x015E
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	80 91 60 01 	lds	r24, 0x0160
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	28 17       	cp	r18, r24
 1e2:	39 07       	cpc	r19, r25
 1e4:	24 f4       	brge	.+8      	; 0x1ee <__vector_24+0xa6>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1e6:	85 ec       	ldi	r24, 0xC5	; 197
 1e8:	80 93 bc 00 	sts	0x00BC, r24
 1ec:	20 c0       	rjmp	.+64     	; 0x22e <__vector_24+0xe6>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1ee:	85 e8       	ldi	r24, 0x85	; 133
 1f0:	80 93 bc 00 	sts	0x00BC, r24
 1f4:	1c c0       	rjmp	.+56     	; 0x22e <__vector_24+0xe6>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 1f6:	80 91 bb 00 	lds	r24, 0x00BB
 1fa:	e0 91 5e 01 	lds	r30, 0x015E
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ef 59       	subi	r30, 0x9F	; 159
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 206:	80 91 5f 01 	lds	r24, 0x015F
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	80 93 5f 01 	sts	0x015F, r24
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 210:	84 e9       	ldi	r24, 0x94	; 148
 212:	80 93 bc 00 	sts	0x00BC, r24
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 216:	0b c0       	rjmp	.+22     	; 0x22e <__vector_24+0xe6>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 218:	85 ea       	ldi	r24, 0xA5	; 165
 21a:	80 93 bc 00 	sts	0x00BC, r24
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 21e:	07 c0       	rjmp	.+14     	; 0x22e <__vector_24+0xe6>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 220:	80 91 b9 00 	lds	r24, 0x00B9
 224:	80 93 00 01 	sts	0x0100, r24
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	80 93 bc 00 	sts	0x00BC, r24
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <get_usart_stream>:
FILE usart_str = FDEV_SETUP_STREAM(usart_putchar, NULL, _FDEV_SETUP_WRITE);

/* Return stream pointer  */
FILE * get_usart_stream(){
	return &usart_str;
}
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	08 95       	ret

0000024e <USART_Init>:

void USART_Init(uint16_t bauds){

	USART_0->UBRR_H = (uint8_t) (bauds >> 8);
 24e:	e0 ec       	ldi	r30, 0xC0	; 192
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	95 83       	std	Z+5, r25	; 0x05
	USART_0->UBRR_L = bauds;
 254:	84 83       	std	Z+4, r24	; 0x04

	/* Disable double speed  */
	USART_0->UCSR_A = 0;
 256:	10 82       	st	Z, r1
	/* Enable TX and RX */
	USART_0->UCSR_B = SET(RXEN0) | SET(TXEN0) | SET(RXCIE0);
 258:	88 e9       	ldi	r24, 0x98	; 152
 25a:	81 83       	std	Z+1, r24	; 0x01
	/* Asynchronous mode:
	 * - 8 data bits
	 * - 1 stop bit
	 * - no parity 	 */
	USART_0->UCSR_C = SET(UCSZ01) | SET(UCSZ00);
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	82 83       	std	Z+2, r24	; 0x02
 260:	08 95       	ret

00000262 <USART_tx>:

/* Send one byte: busy waiting */
void USART_tx(uint8_t data) {

	/* Wait until hardware is ready */
	while (!(USART_0->UCSR_A & (1 << UDRE0)));
 262:	e0 ec       	ldi	r30, 0xC0	; 192
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	95 ff       	sbrs	r25, 5
 26a:	fd cf       	rjmp	.-6      	; 0x266 <USART_tx+0x4>

	USART_0->UDR_ = data;
 26c:	e0 ec       	ldi	r30, 0xC0	; 192
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	86 83       	std	Z+6, r24	; 0x06
 272:	08 95       	ret

00000274 <usart_putchar>:
	return USART_0->UDR_;
}


static int usart_putchar(char c, FILE *fp){
	USART_tx(c);
 274:	0e 94 31 01 	call	0x262	; 0x262 <USART_tx>

	return 0;
}
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret

0000027e <USART_rx>:

/* Receive one byte: busy waiting */
uint8_t USART_rx() {

	/* Wait until something arrive  */
	while (!(USART_0->UCSR_A & (1 << RXC0)));
 27e:	e0 ec       	ldi	r30, 0xC0	; 192
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 23       	and	r24, r24
 286:	ec f7       	brge	.-6      	; 0x282 <USART_rx+0x4>

	return USART_0->UDR_;
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	86 81       	ldd	r24, Z+6	; 0x06
}
 28e:	08 95       	ret

00000290 <inic_stream>:
  *
  * @retval FILE: ponteiro do stream para utiliza com fprintf.
  */
FILE * inic_stream(){
	return &lcd_str;
}
 290:	8f e0       	ldi	r24, 0x0F	; 15
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	08 95       	ret

00000296 <cmd_LCD>:
  *
  * @retval Nenhum
  */
void cmd_LCD(uint8_t c, uint8_t cd)				//c é o dado  e cd indica se é instrução ou caractere
{
    if(cd==0)
 296:	61 11       	cpse	r22, r1
 298:	02 c0       	rjmp	.+4      	; 0x29e <cmd_LCD+0x8>
        CLR_BIT(CONTR_LCD->PORT,RS);
 29a:	28 98       	cbi	0x05, 0	; 5
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <cmd_LCD+0xa>
    else
        SET_BIT(CONTR_LCD->PORT,RS);
 29e:	28 9a       	sbi	0x05, 0	; 5

    //primeiro nibble de dados - 4 MSB
    //compila código para os pinos de dados do LCD nos 4 MSB do PORT
    #if (NIBBLE_DADOS)
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0x0F)|(0xF0 & c);
 2a0:	9b b1       	in	r25, 0x0b	; 11
 2a2:	9f 70       	andi	r25, 0x0F	; 15
 2a4:	28 2f       	mov	r18, r24
 2a6:	20 7f       	andi	r18, 0xF0	; 240
 2a8:	92 2b       	or	r25, r18
 2aa:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	45 e0       	ldi	r20, 0x05	; 5
 2ae:	4a 95       	dec	r20
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <cmd_LCD+0x18>
 2b2:	00 00       	nop
    #else
        //compila código para os pinos de dados do LCD nos 4 LSB do POR
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0xF0)|(c>>4);
    #endif
    
    PULSO_ENABLE();
 2b4:	29 9a       	sbi	0x05, 1	; 5
 2b6:	95 e0       	ldi	r25, 0x05	; 5
 2b8:	9a 95       	dec	r25
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <cmd_LCD+0x22>
 2bc:	00 00       	nop
 2be:	29 98       	cbi	0x05, 1	; 5
 2c0:	40 ef       	ldi	r20, 0xF0	; 240
 2c2:	4a 95       	dec	r20
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <cmd_LCD+0x2c>

    //segundo nibble de dados - 4 LSB
    #if (NIBBLE_DADOS)								
        //compila código para os pinos de dados do LCD nos 4 MSB do PORT
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0x0F) | (0xF0 & (c<<4));
 2c6:	9b b1       	in	r25, 0x0b	; 11
 2c8:	40 e1       	ldi	r20, 0x10	; 16
 2ca:	84 9f       	mul	r24, r20
 2cc:	90 01       	movw	r18, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	9f 70       	andi	r25, 0x0F	; 15
 2d2:	29 2b       	or	r18, r25
 2d4:	2b b9       	out	0x0b, r18	; 11
 2d6:	95 e0       	ldi	r25, 0x05	; 5
 2d8:	9a 95       	dec	r25
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <cmd_LCD+0x42>
 2dc:	00 00       	nop
    #else
        //compila código para os pinos de dados do LCD nos 4 LSB do PORT
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0xF0) | (0x0F & c);
    #endif
    
    PULSO_ENABLE();
 2de:	29 9a       	sbi	0x05, 1	; 5
 2e0:	45 e0       	ldi	r20, 0x05	; 5
 2e2:	4a 95       	dec	r20
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <cmd_LCD+0x4c>
 2e6:	00 00       	nop
 2e8:	29 98       	cbi	0x05, 1	; 5
 2ea:	90 ef       	ldi	r25, 0xF0	; 240
 2ec:	9a 95       	dec	r25
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <cmd_LCD+0x56>
    
    //se for instrução de retorno ou limpeza espera LCD estar pronto
    if((cd==0) && (c<4))
 2f0:	61 11       	cpse	r22, r1
 2f2:	08 c0       	rjmp	.+16     	; 0x304 <cmd_LCD+0x6e>
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	30 f4       	brcc	.+12     	; 0x304 <cmd_LCD+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	9f e1       	ldi	r25, 0x1F	; 31
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <cmd_LCD+0x66>
 300:	00 c0       	rjmp	.+0      	; 0x302 <cmd_LCD+0x6c>
 302:	00 00       	nop
 304:	08 95       	ret

00000306 <lcd_putchar>:
  * @param fp: ponteiro do stream inicilizado que receberá o dado.
  *
  * @retval int maior que zero se sucesso.
  */
int lcd_putchar(char c, FILE *fp){
	cmd_LCD(c,1);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>

	return 1;
}
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	08 95       	ret

00000312 <inic_LCD_4bits>:
{
    //sequência ditada pelo fabricando do circuito integrado HD44780
    //o LCD será só escrito. Então, R/W é sempre zero.
    
    /* Configura pinos de controle */
    SET_BIT(CONTR_LCD->DDR, RS);
 312:	20 9a       	sbi	0x04, 0	; 4
    SET_BIT(CONTR_LCD->DDR, E);
 314:	21 9a       	sbi	0x04, 1	; 4

    /* Configure pinos de dados */
    #if (NIBBLE_DADOS)
        DADOS_LCD->DDR |=  0xF0;
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	80 6f       	ori	r24, 0xF0	; 240
 31a:	8a b9       	out	0x0a, r24	; 10
    #else
        DADOS_LCD->DDR |=  0x0F;
    #endif

    //RS em zero indicando que o dado para o LCD será uma instrução
    CLR_BIT(CONTR_LCD->PORT,RS);
 31c:	28 98       	cbi	0x05, 0	; 5
    //pino de habilitação em zero
    CLR_BIT(CONTR_LCD->PORT,E);
 31e:	29 98       	cbi	0x05, 1	; 5
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	89 ef       	ldi	r24, 0xF9	; 249
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <inic_LCD_4bits+0x14>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <inic_LCD_4bits+0x1e>
 330:	00 00       	nop
    //ser maior). 
    _delay_ms(20);

    //interface de 8 bits
    #if (NIBBLE_DADOS)
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0x0F) | 0x30;
 332:	8b b1       	in	r24, 0x0b	; 11
 334:	8f 70       	andi	r24, 0x0F	; 15
 336:	80 63       	ori	r24, 0x30	; 48
 338:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	25 e0       	ldi	r18, 0x05	; 5
 33c:	2a 95       	dec	r18
 33e:	f1 f7       	brne	.-4      	; 0x33c <inic_LCD_4bits+0x2a>
 340:	00 00       	nop
    #else
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0xF0) | 0x03;
    #endif

    //habilitação respeitando os tempos de resposta do LCD
    PULSO_ENABLE();			
 342:	29 9a       	sbi	0x05, 1	; 5
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <inic_LCD_4bits+0x34>
 34a:	00 00       	nop
 34c:	29 98       	cbi	0x05, 1	; 5
 34e:	90 ef       	ldi	r25, 0xF0	; 240
 350:	9a 95       	dec	r25
 352:	f1 f7       	brne	.-4      	; 0x350 <inic_LCD_4bits+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	8f e1       	ldi	r24, 0x1F	; 31
 356:	9e e4       	ldi	r25, 0x4E	; 78
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <inic_LCD_4bits+0x46>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <inic_LCD_4bits+0x4c>
 35e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	95 e0       	ldi	r25, 0x05	; 5
 362:	9a 95       	dec	r25
 364:	f1 f7       	brne	.-4      	; 0x362 <inic_LCD_4bits+0x50>
 366:	00 00       	nop
    _delay_ms(5);		
    PULSO_ENABLE();
 368:	29 9a       	sbi	0x05, 1	; 5
 36a:	25 e0       	ldi	r18, 0x05	; 5
 36c:	2a 95       	dec	r18
 36e:	f1 f7       	brne	.-4      	; 0x36c <inic_LCD_4bits+0x5a>
 370:	00 00       	nop
 372:	29 98       	cbi	0x05, 1	; 5
 374:	80 ef       	ldi	r24, 0xF0	; 240
 376:	8a 95       	dec	r24
 378:	f1 f7       	brne	.-4      	; 0x376 <inic_LCD_4bits+0x64>
 37a:	8f e1       	ldi	r24, 0x1F	; 31
 37c:	93 e0       	ldi	r25, 0x03	; 3
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <inic_LCD_4bits+0x6c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <inic_LCD_4bits+0x72>
 384:	00 00       	nop
 386:	95 e0       	ldi	r25, 0x05	; 5
 388:	9a 95       	dec	r25
 38a:	f1 f7       	brne	.-4      	; 0x388 <inic_LCD_4bits+0x76>
 38c:	00 00       	nop
    _delay_us(200);
    PULSO_ENABLE();
 38e:	29 9a       	sbi	0x05, 1	; 5
 390:	25 e0       	ldi	r18, 0x05	; 5
 392:	2a 95       	dec	r18
 394:	f1 f7       	brne	.-4      	; 0x392 <inic_LCD_4bits+0x80>
 396:	00 00       	nop
 398:	29 98       	cbi	0x05, 1	; 5
 39a:	80 ef       	ldi	r24, 0xF0	; 240
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <inic_LCD_4bits+0x8a>
    * estabilização da tensão (geralmente funciona). Se o LCD não for inicializado primeiro no 
    * modo de 8 bits, haverá problemas se o microcontrolador for inicializado e o display já o tiver sido.*/
    
    //interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
    #if (NIBBLE_DADOS)
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0x0F) | 0x20;
 3a0:	8b b1       	in	r24, 0x0b	; 11
 3a2:	8f 70       	andi	r24, 0x0F	; 15
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	8b b9       	out	0x0b, r24	; 11
 3a8:	95 e0       	ldi	r25, 0x05	; 5
 3aa:	9a 95       	dec	r25
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <inic_LCD_4bits+0x98>
 3ae:	00 00       	nop
    #else
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0xF0) | 0x02;
    #endif
    
    PULSO_ENABLE();
 3b0:	29 9a       	sbi	0x05, 1	; 5
 3b2:	25 e0       	ldi	r18, 0x05	; 5
 3b4:	2a 95       	dec	r18
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <inic_LCD_4bits+0xa2>
 3b8:	00 00       	nop
 3ba:	29 98       	cbi	0x05, 1	; 5
 3bc:	80 ef       	ldi	r24, 0xF0	; 240
 3be:	8a 95       	dec	r24
 3c0:	f1 f7       	brne	.-4      	; 0x3be <inic_LCD_4bits+0xac>
    //interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
    cmd_LCD(0x28,0);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	88 e2       	ldi	r24, 0x28	; 40
 3c6:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>

    //são enviados os 2 nibbles (0x2 e 0x8)
    
    //desliga o display
    cmd_LCD(0x08,0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
    //limpa todo o display
    cmd_LCD(0x01,0);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
    //mensagem aparente cursor inativo não piscando   
    cmd_LCD(0x0C,0);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	8c e0       	ldi	r24, 0x0C	; 12
 3de:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
    //inicializa cursor na primeira posição a esquerda - 1a linha
    cmd_LCD(0x80,0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	80 e8       	ldi	r24, 0x80	; 128
 3e6:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
 3ea:	08 95       	ret

000003ec <main>:
// 
// 	/* Mensagem incial: terminal do Proteus
// 	 * utiliza final de linha com '\r' */
// 	fprintf(debug,"Teste de debug\n\r");

	modbus_rtu_init();
 3ec:	0e 94 03 02 	call	0x406	; 0x406 <modbus_rtu_init>
	frame_t *f;
	
    while(1){
		/* Vai para primeira linha/coluna */
		cmd_LCD(0x80,0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
		/* Imprime msg */
		//fprintf(lcd_stream,"%d", x++);
		
// 		x = USART_rx();
// 		fprintf(debug,"%c\n\r", x);
		f = modbus_rtu_read();
 3f8:	0e 94 16 02 	call	0x42c	; 0x42c <modbus_rtu_read>
		//fprintf(lcd_stream,"%s", "test123");
		//_delay_ms(1000);
		modbus_rtu_write(f,0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <modbus_rtu_write>
 404:	f5 cf       	rjmp	.-22     	; 0x3f0 <main+0x4>

00000406 <modbus_rtu_init>:
	uint8_t crc[2];							//Big Endian
	char end;	
};

void modbus_rtu_init(){
	lcd_stream = inic_stream();
 406:	0e 94 48 01 	call	0x290	; 0x290 <inic_stream>
 40a:	90 93 66 01 	sts	0x0166, r25
 40e:	80 93 65 01 	sts	0x0165, r24
	debug = get_usart_stream();
 412:	0e 94 24 01 	call	0x248	; 0x248 <get_usart_stream>
 416:	90 93 68 01 	sts	0x0168, r25
 41a:	80 93 67 01 	sts	0x0167, r24
	inic_LCD_4bits();
 41e:	0e 94 89 01 	call	0x312	; 0x312 <inic_LCD_4bits>
	USART_Init(BAUD);
 422:	87 e6       	ldi	r24, 0x67	; 103
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Init>
 42a:	08 95       	ret

0000042c <modbus_rtu_read>:
}

uint16_t *modbus_rtu_read(){
 42c:	8f 92       	push	r8
 42e:	9f 92       	push	r9
 430:	af 92       	push	r10
 432:	bf 92       	push	r11
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	62 97       	sbiw	r28, 0x12	; 18
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
	//frame_t *f = malloc(sizeof(frame_t));	
	frame_t f;
	cmd_LCD(0x80,0);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
	fprintf(debug,"\nModbus:\n\r");
 45c:	20 91 67 01 	lds	r18, 0x0167
 460:	30 91 68 01 	lds	r19, 0x0168
 464:	4a e0       	ldi	r20, 0x0A	; 10
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	8d e1       	ldi	r24, 0x1D	; 29
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 d5 03 	call	0x7aa	; 0x7aa <fwrite>
	
		fprintf(lcd_stream,"M");
 474:	60 91 65 01 	lds	r22, 0x0165
 478:	70 91 66 01 	lds	r23, 0x0166
 47c:	8d e4       	ldi	r24, 0x4D	; 77
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
		fprintf(lcd_stream,"O");
 484:	60 91 65 01 	lds	r22, 0x0165
 488:	70 91 66 01 	lds	r23, 0x0166
 48c:	8f e4       	ldi	r24, 0x4F	; 79
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
		fprintf(lcd_stream,"D");
 494:	60 91 65 01 	lds	r22, 0x0165
 498:	70 91 66 01 	lds	r23, 0x0166
 49c:	84 e4       	ldi	r24, 0x44	; 68
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
		fprintf(lcd_stream,"B");
 4a4:	60 91 65 01 	lds	r22, 0x0165
 4a8:	70 91 66 01 	lds	r23, 0x0166
 4ac:	82 e4       	ldi	r24, 0x42	; 66
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
		fprintf(lcd_stream,"U");
 4b4:	60 91 65 01 	lds	r22, 0x0165
 4b8:	70 91 66 01 	lds	r23, 0x0166
 4bc:	85 e5       	ldi	r24, 0x55	; 85
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
		fprintf(lcd_stream,"S");
 4c4:	60 91 65 01 	lds	r22, 0x0165
 4c8:	70 91 66 01 	lds	r23, 0x0166
 4cc:	83 e5       	ldi	r24, 0x53	; 83
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 4d4:	8e 01       	movw	r16, r28
 4d6:	06 5f       	subi	r16, 0xF6	; 246
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	7e 01       	movw	r14, r28
 4dc:	82 e1       	ldi	r24, 0x12	; 18
 4de:	e8 0e       	add	r14, r24
 4e0:	f1 1c       	adc	r15, r1
	
	char buff[9];
	//uint8_t buff[9];
	
	for(uint8_t i=0; i<LEN; i++){
		buff[i] = USART_rx();		//Receive one byte
 4e2:	0e 94 3f 01 	call	0x27e	; 0x27e <USART_rx>
 4e6:	f8 01       	movw	r30, r16
 4e8:	81 93       	st	Z+, r24
 4ea:	8f 01       	movw	r16, r30
		fprintf(lcd_stream,"S");
	
	char buff[9];
	//uint8_t buff[9];
	
	for(uint8_t i=0; i<LEN; i++){
 4ec:	ee 15       	cp	r30, r14
 4ee:	ff 05       	cpc	r31, r15
 4f0:	c1 f7       	brne	.-16     	; 0x4e2 <modbus_rtu_read+0xb6>
		buff[i] = USART_rx();		//Receive one byte
	}

	f.addr = buff[0];
 4f2:	8a 85       	ldd	r24, Y+10	; 0x0a
 4f4:	89 83       	std	Y+1, r24	; 0x01
	f.cmd = buff[1];
 4f6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4f8:	8a 83       	std	Y+2, r24	; 0x02
	//f.reg = (buff[2] << 8) | buff[3];
	f.reg[0] = buff[2];
 4fa:	8c 85       	ldd	r24, Y+12	; 0x0c
 4fc:	8b 83       	std	Y+3, r24	; 0x03
	f.reg[1] = buff[3];	
 4fe:	8d 85       	ldd	r24, Y+13	; 0x0d
 500:	8c 83       	std	Y+4, r24	; 0x04
	f.data[0] = buff[4];
 502:	8e 85       	ldd	r24, Y+14	; 0x0e
 504:	8d 83       	std	Y+5, r24	; 0x05
	f.data[1] = buff[5];
 506:	8f 85       	ldd	r24, Y+15	; 0x0f
 508:	8e 83       	std	Y+6, r24	; 0x06
	//f.crc = (buff[6] << 8) | buff[7];
	f.crc[0] = buff[6];
 50a:	88 89       	ldd	r24, Y+16	; 0x10
 50c:	8f 83       	std	Y+7, r24	; 0x07
	f.crc[1] = buff[7];
 50e:	89 89       	ldd	r24, Y+17	; 0x11
 510:	88 87       	std	Y+8, r24	; 0x08
	f.end = '\0';
 512:	19 86       	std	Y+9, r1	; 0x09
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 514:	8f e3       	ldi	r24, 0x3F	; 63
 516:	9c e9       	ldi	r25, 0x9C	; 156
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <modbus_rtu_read+0xec>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <modbus_rtu_read+0xf2>
 51e:	00 00       	nop
	for(uint8_t *i=&f; *i; i++){
		fprintf(lcd_stream,"%c", i);
		fprintf(debug,"\n%c", 'u');
	}*/
	_delay_ms(10);
	fprintf(debug,"%p\r", &f);
 520:	fe 01       	movw	r30, r28
 522:	31 96       	adiw	r30, 0x01	; 1
 524:	4f 01       	movw	r8, r30
 526:	9f 92       	push	r9
 528:	ef 93       	push	r30
 52a:	88 e2       	ldi	r24, 0x28	; 40
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	9f 93       	push	r25
 530:	8f 93       	push	r24
 532:	80 91 68 01 	lds	r24, 0x0168
 536:	8f 93       	push	r24
 538:	80 91 67 01 	lds	r24, 0x0167
 53c:	8f 93       	push	r24
 53e:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	
#if DEBUG
	fprintf(debug,"Addr: %c\n\r", f.addr);
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	1f 92       	push	r1
 546:	8f 93       	push	r24
 548:	8c e2       	ldi	r24, 0x2C	; 44
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	9f 93       	push	r25
 54e:	8f 93       	push	r24
 550:	80 91 68 01 	lds	r24, 0x0168
 554:	8f 93       	push	r24
 556:	80 91 67 01 	lds	r24, 0x0167
 55a:	8f 93       	push	r24
 55c:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"Cmd: %c\n\r", f.cmd);
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	1f 92       	push	r1
 564:	8f 93       	push	r24
 566:	87 e3       	ldi	r24, 0x37	; 55
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	9f 93       	push	r25
 56c:	8f 93       	push	r24
 56e:	80 91 68 01 	lds	r24, 0x0168
 572:	8f 93       	push	r24
 574:	80 91 67 01 	lds	r24, 0x0167
 578:	8f 93       	push	r24
 57a:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"Reg: %c", f.reg[0]);
 57e:	8b 81       	ldd	r24, Y+3	; 0x03
 580:	1f 92       	push	r1
 582:	8f 93       	push	r24
 584:	81 e4       	ldi	r24, 0x41	; 65
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	9f 93       	push	r25
 58a:	8f 93       	push	r24
 58c:	80 91 68 01 	lds	r24, 0x0168
 590:	8f 93       	push	r24
 592:	80 91 67 01 	lds	r24, 0x0167
 596:	8f 93       	push	r24
 598:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"%c\n\r", f.reg[1]);
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	1f 92       	push	r1
 5a0:	8f 93       	push	r24
 5a2:	0c e3       	ldi	r16, 0x3C	; 60
 5a4:	11 e0       	ldi	r17, 0x01	; 1
 5a6:	1f 93       	push	r17
 5a8:	0f 93       	push	r16
 5aa:	80 91 68 01 	lds	r24, 0x0168
 5ae:	8f 93       	push	r24
 5b0:	80 91 67 01 	lds	r24, 0x0167
 5b4:	8f 93       	push	r24
 5b6:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"Data: %c", f.data[0]);
 5ba:	8d 81       	ldd	r24, Y+5	; 0x05
 5bc:	1f 92       	push	r1
 5be:	8f 93       	push	r24
 5c0:	0f 2e       	mov	r0, r31
 5c2:	f9 e4       	ldi	r31, 0x49	; 73
 5c4:	ef 2e       	mov	r14, r31
 5c6:	f1 e0       	ldi	r31, 0x01	; 1
 5c8:	ff 2e       	mov	r15, r31
 5ca:	f0 2d       	mov	r31, r0
 5cc:	ff 92       	push	r15
 5ce:	ef 92       	push	r14
 5d0:	80 91 68 01 	lds	r24, 0x0168
 5d4:	8f 93       	push	r24
 5d6:	80 91 67 01 	lds	r24, 0x0167
 5da:	8f 93       	push	r24
 5dc:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"%c\n\r", f.data[1]);
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	8e 81       	ldd	r24, Y+6	; 0x06
 5ec:	1f 92       	push	r1
 5ee:	8f 93       	push	r24
 5f0:	1f 93       	push	r17
 5f2:	0f 93       	push	r16
 5f4:	80 91 68 01 	lds	r24, 0x0168
 5f8:	8f 93       	push	r24
 5fa:	80 91 67 01 	lds	r24, 0x0167
 5fe:	8f 93       	push	r24
 600:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"CRC: %c", f.crc[0]);
 604:	8f 81       	ldd	r24, Y+7	; 0x07
 606:	1f 92       	push	r1
 608:	8f 93       	push	r24
 60a:	82 e5       	ldi	r24, 0x52	; 82
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	9f 93       	push	r25
 610:	8f 93       	push	r24
 612:	80 91 68 01 	lds	r24, 0x0168
 616:	8f 93       	push	r24
 618:	80 91 67 01 	lds	r24, 0x0167
 61c:	8f 93       	push	r24
 61e:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"%c\n\r", f.crc[1]);
 622:	88 85       	ldd	r24, Y+8	; 0x08
 624:	1f 92       	push	r1
 626:	8f 93       	push	r24
 628:	1f 93       	push	r17
 62a:	0f 93       	push	r16
 62c:	80 91 68 01 	lds	r24, 0x0168
 630:	8f 93       	push	r24
 632:	80 91 67 01 	lds	r24, 0x0167
 636:	8f 93       	push	r24
 638:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"%s\r", &buff);
 63c:	5e 01       	movw	r10, r28
 63e:	9a e0       	ldi	r25, 0x0A	; 10
 640:	a9 0e       	add	r10, r25
 642:	b1 1c       	adc	r11, r1
 644:	bf 92       	push	r11
 646:	af 92       	push	r10
 648:	0f 2e       	mov	r0, r31
 64a:	fa e5       	ldi	r31, 0x5A	; 90
 64c:	cf 2e       	mov	r12, r31
 64e:	f1 e0       	ldi	r31, 0x01	; 1
 650:	df 2e       	mov	r13, r31
 652:	f0 2d       	mov	r31, r0
 654:	df 92       	push	r13
 656:	cf 92       	push	r12
 658:	80 91 68 01 	lds	r24, 0x0168
 65c:	8f 93       	push	r24
 65e:	80 91 67 01 	lds	r24, 0x0167
 662:	8f 93       	push	r24
 664:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"%s\r", &buff);
 668:	bf 92       	push	r11
 66a:	af 92       	push	r10
 66c:	df 92       	push	r13
 66e:	cf 92       	push	r12
 670:	80 91 68 01 	lds	r24, 0x0168
 674:	8f 93       	push	r24
 676:	80 91 67 01 	lds	r24, 0x0167
 67a:	8f 93       	push	r24
 67c:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	}
}

void nibble_data(uint8_t *data){
	uint8_t tmp;
	tmp = data[0];
 680:	9d 81       	ldd	r25, Y+5	; 0x05
	data[0] = data[1];
 682:	8e 81       	ldd	r24, Y+6	; 0x06
 684:	8d 83       	std	Y+5, r24	; 0x05
	data[1] = tmp;
 686:	9e 83       	std	Y+6, r25	; 0x06
	fprintf(debug,"CRC: %c", f.crc[0]);
	fprintf(debug,"%c\n\r", f.crc[1]);
	fprintf(debug,"%s\r", &buff);
	fprintf(debug,"%s\r", &buff);
	nibble_data(f.data);
	fprintf(debug,"Data: %c", f.data[0]);
 688:	1f 92       	push	r1
 68a:	8f 93       	push	r24
 68c:	ff 92       	push	r15
 68e:	ef 92       	push	r14
 690:	80 91 68 01 	lds	r24, 0x0168
 694:	8f 93       	push	r24
 696:	80 91 67 01 	lds	r24, 0x0167
 69a:	8f 93       	push	r24
 69c:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
	fprintf(debug,"%c\n\r", f.data[1]);
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	f8 94       	cli
 6a4:	de bf       	out	0x3e, r29	; 62
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	cd bf       	out	0x3d, r28	; 61
 6aa:	8e 81       	ldd	r24, Y+6	; 0x06
 6ac:	1f 92       	push	r1
 6ae:	8f 93       	push	r24
 6b0:	1f 93       	push	r17
 6b2:	0f 93       	push	r16
 6b4:	80 91 68 01 	lds	r24, 0x0168
 6b8:	8f 93       	push	r24
 6ba:	80 91 67 01 	lds	r24, 0x0167
 6be:	8f 93       	push	r24
 6c0:	0e 94 91 03 	call	0x722	; 0x722 <fprintf>
#endif
	return &f;
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
}
 6d0:	c4 01       	movw	r24, r8
 6d2:	62 96       	adiw	r28, 0x12	; 18
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	de bf       	out	0x3e, r29	; 62
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	cd bf       	out	0x3d, r28	; 61
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	bf 90       	pop	r11
 6f0:	af 90       	pop	r10
 6f2:	9f 90       	pop	r9
 6f4:	8f 90       	pop	r8
 6f6:	08 95       	ret

000006f8 <modbus_rtu_write>:

void modbus_rtu_write(uint8_t *buf, int len){
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	ec 01       	movw	r28, r24
	frame_t *f;
	uint8_t test[10] = "ZXCVBNMAS";
	for(uint8_t i=0; i<LEN; i++){
 700:	10 e0       	ldi	r17, 0x00	; 0
		//USART_tx(uint8_t buff[i]);
		//USART_tx(test[i]);
		USART_tx(buf[i]);
 702:	89 91       	ld	r24, Y+
 704:	0e 94 31 01 	call	0x262	; 0x262 <USART_tx>
}

void modbus_rtu_write(uint8_t *buf, int len){
	frame_t *f;
	uint8_t test[10] = "ZXCVBNMAS";
	for(uint8_t i=0; i<LEN; i++){
 708:	1f 5f       	subi	r17, 0xFF	; 255
 70a:	18 30       	cpi	r17, 0x08	; 8
 70c:	d1 f7       	brne	.-12     	; 0x702 <modbus_rtu_write+0xa>
		//USART_tx(uint8_t buff[i]);
		//USART_tx(test[i]);
		USART_tx(buf[i]);
	}
}
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	1f 91       	pop	r17
 714:	08 95       	ret

00000716 <__tablejump2__>:
 716:	ee 0f       	add	r30, r30
 718:	ff 1f       	adc	r31, r31

0000071a <__tablejump__>:
 71a:	05 90       	lpm	r0, Z+
 71c:	f4 91       	lpm	r31, Z
 71e:	e0 2d       	mov	r30, r0
 720:	09 94       	ijmp

00000722 <fprintf>:
 722:	a0 e0       	ldi	r26, 0x00	; 0
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	e7 e9       	ldi	r30, 0x97	; 151
 728:	f3 e0       	ldi	r31, 0x03	; 3
 72a:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__prologue_saves__+0x20>
 72e:	ae 01       	movw	r20, r28
 730:	47 5f       	subi	r20, 0xF7	; 247
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	6f 81       	ldd	r22, Y+7	; 0x07
 736:	78 85       	ldd	r23, Y+8	; 0x08
 738:	8d 81       	ldd	r24, Y+5	; 0x05
 73a:	9e 81       	ldd	r25, Y+6	; 0x06
 73c:	0e 94 09 04 	call	0x812	; 0x812 <vfprintf>
 740:	e2 e0       	ldi	r30, 0x02	; 2
 742:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__epilogue_restores__+0x20>

00000746 <fputc>:
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	18 2f       	mov	r17, r24
 750:	09 2f       	mov	r16, r25
 752:	eb 01       	movw	r28, r22
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	81 fd       	sbrc	r24, 1
 758:	03 c0       	rjmp	.+6      	; 0x760 <fputc+0x1a>
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	9f ef       	ldi	r25, 0xFF	; 255
 75e:	20 c0       	rjmp	.+64     	; 0x7a0 <fputc+0x5a>
 760:	82 ff       	sbrs	r24, 2
 762:	10 c0       	rjmp	.+32     	; 0x784 <fputc+0x3e>
 764:	4e 81       	ldd	r20, Y+6	; 0x06
 766:	5f 81       	ldd	r21, Y+7	; 0x07
 768:	2c 81       	ldd	r18, Y+4	; 0x04
 76a:	3d 81       	ldd	r19, Y+5	; 0x05
 76c:	42 17       	cp	r20, r18
 76e:	53 07       	cpc	r21, r19
 770:	7c f4       	brge	.+30     	; 0x790 <fputc+0x4a>
 772:	e8 81       	ld	r30, Y
 774:	f9 81       	ldd	r31, Y+1	; 0x01
 776:	9f 01       	movw	r18, r30
 778:	2f 5f       	subi	r18, 0xFF	; 255
 77a:	3f 4f       	sbci	r19, 0xFF	; 255
 77c:	39 83       	std	Y+1, r19	; 0x01
 77e:	28 83       	st	Y, r18
 780:	10 83       	st	Z, r17
 782:	06 c0       	rjmp	.+12     	; 0x790 <fputc+0x4a>
 784:	e8 85       	ldd	r30, Y+8	; 0x08
 786:	f9 85       	ldd	r31, Y+9	; 0x09
 788:	81 2f       	mov	r24, r17
 78a:	09 95       	icall
 78c:	89 2b       	or	r24, r25
 78e:	29 f7       	brne	.-54     	; 0x75a <fputc+0x14>
 790:	2e 81       	ldd	r18, Y+6	; 0x06
 792:	3f 81       	ldd	r19, Y+7	; 0x07
 794:	2f 5f       	subi	r18, 0xFF	; 255
 796:	3f 4f       	sbci	r19, 0xFF	; 255
 798:	3f 83       	std	Y+7, r19	; 0x07
 79a:	2e 83       	std	Y+6, r18	; 0x06
 79c:	81 2f       	mov	r24, r17
 79e:	90 2f       	mov	r25, r16
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	08 95       	ret

000007aa <fwrite>:
 7aa:	a0 e0       	ldi	r26, 0x00	; 0
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	eb ed       	ldi	r30, 0xDB	; 219
 7b0:	f3 e0       	ldi	r31, 0x03	; 3
 7b2:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__prologue_saves__+0xc>
 7b6:	6b 01       	movw	r12, r22
 7b8:	4a 01       	movw	r8, r20
 7ba:	79 01       	movw	r14, r18
 7bc:	d9 01       	movw	r26, r18
 7be:	13 96       	adiw	r26, 0x03	; 3
 7c0:	2c 91       	ld	r18, X
 7c2:	21 ff       	sbrs	r18, 1
 7c4:	1d c0       	rjmp	.+58     	; 0x800 <fwrite+0x56>
 7c6:	c0 e0       	ldi	r28, 0x00	; 0
 7c8:	d0 e0       	ldi	r29, 0x00	; 0
 7ca:	c8 15       	cp	r28, r8
 7cc:	d9 05       	cpc	r29, r9
 7ce:	d9 f0       	breq	.+54     	; 0x806 <fwrite+0x5c>
 7d0:	8c 01       	movw	r16, r24
 7d2:	5c 01       	movw	r10, r24
 7d4:	ac 0c       	add	r10, r12
 7d6:	bd 1c       	adc	r11, r13
 7d8:	c8 01       	movw	r24, r16
 7da:	0a 15       	cp	r16, r10
 7dc:	1b 05       	cpc	r17, r11
 7de:	71 f0       	breq	.+28     	; 0x7fc <fwrite+0x52>
 7e0:	0f 5f       	subi	r16, 0xFF	; 255
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	d7 01       	movw	r26, r14
 7e6:	18 96       	adiw	r26, 0x08	; 8
 7e8:	ed 91       	ld	r30, X+
 7ea:	fc 91       	ld	r31, X
 7ec:	19 97       	sbiw	r26, 0x09	; 9
 7ee:	b7 01       	movw	r22, r14
 7f0:	dc 01       	movw	r26, r24
 7f2:	8c 91       	ld	r24, X
 7f4:	09 95       	icall
 7f6:	89 2b       	or	r24, r25
 7f8:	79 f3       	breq	.-34     	; 0x7d8 <fwrite+0x2e>
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <fwrite+0x5c>
 7fc:	21 96       	adiw	r28, 0x01	; 1
 7fe:	e5 cf       	rjmp	.-54     	; 0x7ca <fwrite+0x20>
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	01 c0       	rjmp	.+2      	; 0x808 <fwrite+0x5e>
 806:	ce 01       	movw	r24, r28
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
 80c:	ec e0       	ldi	r30, 0x0C	; 12
 80e:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__epilogue_restores__+0xc>

00000812 <vfprintf>:
 812:	ac e0       	ldi	r26, 0x0C	; 12
 814:	b0 e0       	ldi	r27, 0x00	; 0
 816:	ef e0       	ldi	r30, 0x0F	; 15
 818:	f4 e0       	ldi	r31, 0x04	; 4
 81a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__prologue_saves__>
 81e:	7c 01       	movw	r14, r24
 820:	6b 01       	movw	r12, r22
 822:	8a 01       	movw	r16, r20
 824:	fc 01       	movw	r30, r24
 826:	17 82       	std	Z+7, r1	; 0x07
 828:	16 82       	std	Z+6, r1	; 0x06
 82a:	83 81       	ldd	r24, Z+3	; 0x03
 82c:	81 ff       	sbrs	r24, 1
 82e:	bd c1       	rjmp	.+890    	; 0xbaa <__stack+0x2ab>
 830:	ce 01       	movw	r24, r28
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	4c 01       	movw	r8, r24
 836:	f7 01       	movw	r30, r14
 838:	93 81       	ldd	r25, Z+3	; 0x03
 83a:	f6 01       	movw	r30, r12
 83c:	93 fd       	sbrc	r25, 3
 83e:	85 91       	lpm	r24, Z+
 840:	93 ff       	sbrs	r25, 3
 842:	81 91       	ld	r24, Z+
 844:	6f 01       	movw	r12, r30
 846:	88 23       	and	r24, r24
 848:	09 f4       	brne	.+2      	; 0x84c <vfprintf+0x3a>
 84a:	ab c1       	rjmp	.+854    	; 0xba2 <__stack+0x2a3>
 84c:	85 32       	cpi	r24, 0x25	; 37
 84e:	39 f4       	brne	.+14     	; 0x85e <vfprintf+0x4c>
 850:	93 fd       	sbrc	r25, 3
 852:	85 91       	lpm	r24, Z+
 854:	93 ff       	sbrs	r25, 3
 856:	81 91       	ld	r24, Z+
 858:	6f 01       	movw	r12, r30
 85a:	85 32       	cpi	r24, 0x25	; 37
 85c:	29 f4       	brne	.+10     	; 0x868 <vfprintf+0x56>
 85e:	b7 01       	movw	r22, r14
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 866:	e7 cf       	rjmp	.-50     	; 0x836 <vfprintf+0x24>
 868:	51 2c       	mov	r5, r1
 86a:	31 2c       	mov	r3, r1
 86c:	20 e0       	ldi	r18, 0x00	; 0
 86e:	20 32       	cpi	r18, 0x20	; 32
 870:	a0 f4       	brcc	.+40     	; 0x89a <vfprintf+0x88>
 872:	8b 32       	cpi	r24, 0x2B	; 43
 874:	69 f0       	breq	.+26     	; 0x890 <vfprintf+0x7e>
 876:	30 f4       	brcc	.+12     	; 0x884 <vfprintf+0x72>
 878:	80 32       	cpi	r24, 0x20	; 32
 87a:	59 f0       	breq	.+22     	; 0x892 <vfprintf+0x80>
 87c:	83 32       	cpi	r24, 0x23	; 35
 87e:	69 f4       	brne	.+26     	; 0x89a <vfprintf+0x88>
 880:	20 61       	ori	r18, 0x10	; 16
 882:	2c c0       	rjmp	.+88     	; 0x8dc <vfprintf+0xca>
 884:	8d 32       	cpi	r24, 0x2D	; 45
 886:	39 f0       	breq	.+14     	; 0x896 <vfprintf+0x84>
 888:	80 33       	cpi	r24, 0x30	; 48
 88a:	39 f4       	brne	.+14     	; 0x89a <vfprintf+0x88>
 88c:	21 60       	ori	r18, 0x01	; 1
 88e:	26 c0       	rjmp	.+76     	; 0x8dc <vfprintf+0xca>
 890:	22 60       	ori	r18, 0x02	; 2
 892:	24 60       	ori	r18, 0x04	; 4
 894:	23 c0       	rjmp	.+70     	; 0x8dc <vfprintf+0xca>
 896:	28 60       	ori	r18, 0x08	; 8
 898:	21 c0       	rjmp	.+66     	; 0x8dc <vfprintf+0xca>
 89a:	27 fd       	sbrc	r18, 7
 89c:	27 c0       	rjmp	.+78     	; 0x8ec <vfprintf+0xda>
 89e:	30 ed       	ldi	r19, 0xD0	; 208
 8a0:	38 0f       	add	r19, r24
 8a2:	3a 30       	cpi	r19, 0x0A	; 10
 8a4:	78 f4       	brcc	.+30     	; 0x8c4 <vfprintf+0xb2>
 8a6:	26 ff       	sbrs	r18, 6
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <vfprintf+0xa4>
 8aa:	fa e0       	ldi	r31, 0x0A	; 10
 8ac:	5f 9e       	mul	r5, r31
 8ae:	30 0d       	add	r19, r0
 8b0:	11 24       	eor	r1, r1
 8b2:	53 2e       	mov	r5, r19
 8b4:	13 c0       	rjmp	.+38     	; 0x8dc <vfprintf+0xca>
 8b6:	8a e0       	ldi	r24, 0x0A	; 10
 8b8:	38 9e       	mul	r3, r24
 8ba:	30 0d       	add	r19, r0
 8bc:	11 24       	eor	r1, r1
 8be:	33 2e       	mov	r3, r19
 8c0:	20 62       	ori	r18, 0x20	; 32
 8c2:	0c c0       	rjmp	.+24     	; 0x8dc <vfprintf+0xca>
 8c4:	8e 32       	cpi	r24, 0x2E	; 46
 8c6:	21 f4       	brne	.+8      	; 0x8d0 <vfprintf+0xbe>
 8c8:	26 fd       	sbrc	r18, 6
 8ca:	6b c1       	rjmp	.+726    	; 0xba2 <__stack+0x2a3>
 8cc:	20 64       	ori	r18, 0x40	; 64
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0xca>
 8d0:	8c 36       	cpi	r24, 0x6C	; 108
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <vfprintf+0xc6>
 8d4:	20 68       	ori	r18, 0x80	; 128
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0xca>
 8d8:	88 36       	cpi	r24, 0x68	; 104
 8da:	41 f4       	brne	.+16     	; 0x8ec <vfprintf+0xda>
 8dc:	f6 01       	movw	r30, r12
 8de:	93 fd       	sbrc	r25, 3
 8e0:	85 91       	lpm	r24, Z+
 8e2:	93 ff       	sbrs	r25, 3
 8e4:	81 91       	ld	r24, Z+
 8e6:	6f 01       	movw	r12, r30
 8e8:	81 11       	cpse	r24, r1
 8ea:	c1 cf       	rjmp	.-126    	; 0x86e <vfprintf+0x5c>
 8ec:	98 2f       	mov	r25, r24
 8ee:	9f 7d       	andi	r25, 0xDF	; 223
 8f0:	95 54       	subi	r25, 0x45	; 69
 8f2:	93 30       	cpi	r25, 0x03	; 3
 8f4:	28 f4       	brcc	.+10     	; 0x900 <__stack+0x1>
 8f6:	0c 5f       	subi	r16, 0xFC	; 252
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	ff e3       	ldi	r31, 0x3F	; 63
 8fc:	f9 83       	std	Y+1, r31	; 0x01
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <__stack+0x1b>
 900:	83 36       	cpi	r24, 0x63	; 99
 902:	31 f0       	breq	.+12     	; 0x910 <__stack+0x11>
 904:	83 37       	cpi	r24, 0x73	; 115
 906:	71 f0       	breq	.+28     	; 0x924 <__stack+0x25>
 908:	83 35       	cpi	r24, 0x53	; 83
 90a:	09 f0       	breq	.+2      	; 0x90e <__stack+0xf>
 90c:	5b c0       	rjmp	.+182    	; 0x9c4 <__stack+0xc5>
 90e:	22 c0       	rjmp	.+68     	; 0x954 <__stack+0x55>
 910:	f8 01       	movw	r30, r16
 912:	80 81       	ld	r24, Z
 914:	89 83       	std	Y+1, r24	; 0x01
 916:	0e 5f       	subi	r16, 0xFE	; 254
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	44 24       	eor	r4, r4
 91c:	43 94       	inc	r4
 91e:	51 2c       	mov	r5, r1
 920:	54 01       	movw	r10, r8
 922:	15 c0       	rjmp	.+42     	; 0x94e <__stack+0x4f>
 924:	38 01       	movw	r6, r16
 926:	f2 e0       	ldi	r31, 0x02	; 2
 928:	6f 0e       	add	r6, r31
 92a:	71 1c       	adc	r7, r1
 92c:	f8 01       	movw	r30, r16
 92e:	a0 80       	ld	r10, Z
 930:	b1 80       	ldd	r11, Z+1	; 0x01
 932:	26 ff       	sbrs	r18, 6
 934:	03 c0       	rjmp	.+6      	; 0x93c <__stack+0x3d>
 936:	65 2d       	mov	r22, r5
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
 93c:	6f ef       	ldi	r22, 0xFF	; 255
 93e:	7f ef       	ldi	r23, 0xFF	; 255
 940:	c5 01       	movw	r24, r10
 942:	2c 87       	std	Y+12, r18	; 0x0c
 944:	0e 94 e6 05 	call	0xbcc	; 0xbcc <strnlen>
 948:	2c 01       	movw	r4, r24
 94a:	83 01       	movw	r16, r6
 94c:	2c 85       	ldd	r18, Y+12	; 0x0c
 94e:	2f 77       	andi	r18, 0x7F	; 127
 950:	22 2e       	mov	r2, r18
 952:	17 c0       	rjmp	.+46     	; 0x982 <__stack+0x83>
 954:	38 01       	movw	r6, r16
 956:	f2 e0       	ldi	r31, 0x02	; 2
 958:	6f 0e       	add	r6, r31
 95a:	71 1c       	adc	r7, r1
 95c:	f8 01       	movw	r30, r16
 95e:	a0 80       	ld	r10, Z
 960:	b1 80       	ldd	r11, Z+1	; 0x01
 962:	26 ff       	sbrs	r18, 6
 964:	03 c0       	rjmp	.+6      	; 0x96c <__stack+0x6d>
 966:	65 2d       	mov	r22, r5
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
 96c:	6f ef       	ldi	r22, 0xFF	; 255
 96e:	7f ef       	ldi	r23, 0xFF	; 255
 970:	c5 01       	movw	r24, r10
 972:	2c 87       	std	Y+12, r18	; 0x0c
 974:	0e 94 db 05 	call	0xbb6	; 0xbb6 <strnlen_P>
 978:	2c 01       	movw	r4, r24
 97a:	2c 85       	ldd	r18, Y+12	; 0x0c
 97c:	20 68       	ori	r18, 0x80	; 128
 97e:	22 2e       	mov	r2, r18
 980:	83 01       	movw	r16, r6
 982:	23 fc       	sbrc	r2, 3
 984:	1b c0       	rjmp	.+54     	; 0x9bc <__stack+0xbd>
 986:	83 2d       	mov	r24, r3
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	48 16       	cp	r4, r24
 98c:	59 06       	cpc	r5, r25
 98e:	b0 f4       	brcc	.+44     	; 0x9bc <__stack+0xbd>
 990:	b7 01       	movw	r22, r14
 992:	80 e2       	ldi	r24, 0x20	; 32
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 99a:	3a 94       	dec	r3
 99c:	f4 cf       	rjmp	.-24     	; 0x986 <__stack+0x87>
 99e:	f5 01       	movw	r30, r10
 9a0:	27 fc       	sbrc	r2, 7
 9a2:	85 91       	lpm	r24, Z+
 9a4:	27 fe       	sbrs	r2, 7
 9a6:	81 91       	ld	r24, Z+
 9a8:	5f 01       	movw	r10, r30
 9aa:	b7 01       	movw	r22, r14
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 9b2:	31 10       	cpse	r3, r1
 9b4:	3a 94       	dec	r3
 9b6:	f1 e0       	ldi	r31, 0x01	; 1
 9b8:	4f 1a       	sub	r4, r31
 9ba:	51 08       	sbc	r5, r1
 9bc:	41 14       	cp	r4, r1
 9be:	51 04       	cpc	r5, r1
 9c0:	71 f7       	brne	.-36     	; 0x99e <__stack+0x9f>
 9c2:	e5 c0       	rjmp	.+458    	; 0xb8e <__stack+0x28f>
 9c4:	84 36       	cpi	r24, 0x64	; 100
 9c6:	11 f0       	breq	.+4      	; 0x9cc <__stack+0xcd>
 9c8:	89 36       	cpi	r24, 0x69	; 105
 9ca:	39 f5       	brne	.+78     	; 0xa1a <__stack+0x11b>
 9cc:	f8 01       	movw	r30, r16
 9ce:	27 ff       	sbrs	r18, 7
 9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <__stack+0xe1>
 9d2:	60 81       	ld	r22, Z
 9d4:	71 81       	ldd	r23, Z+1	; 0x01
 9d6:	82 81       	ldd	r24, Z+2	; 0x02
 9d8:	93 81       	ldd	r25, Z+3	; 0x03
 9da:	0c 5f       	subi	r16, 0xFC	; 252
 9dc:	1f 4f       	sbci	r17, 0xFF	; 255
 9de:	08 c0       	rjmp	.+16     	; 0x9f0 <__stack+0xf1>
 9e0:	60 81       	ld	r22, Z
 9e2:	71 81       	ldd	r23, Z+1	; 0x01
 9e4:	88 27       	eor	r24, r24
 9e6:	77 fd       	sbrc	r23, 7
 9e8:	80 95       	com	r24
 9ea:	98 2f       	mov	r25, r24
 9ec:	0e 5f       	subi	r16, 0xFE	; 254
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	2f 76       	andi	r18, 0x6F	; 111
 9f2:	b2 2e       	mov	r11, r18
 9f4:	97 ff       	sbrs	r25, 7
 9f6:	09 c0       	rjmp	.+18     	; 0xa0a <__stack+0x10b>
 9f8:	90 95       	com	r25
 9fa:	80 95       	com	r24
 9fc:	70 95       	com	r23
 9fe:	61 95       	neg	r22
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	20 68       	ori	r18, 0x80	; 128
 a08:	b2 2e       	mov	r11, r18
 a0a:	2a e0       	ldi	r18, 0x0A	; 10
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	a4 01       	movw	r20, r8
 a10:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__ultoa_invert>
 a14:	a8 2e       	mov	r10, r24
 a16:	a8 18       	sub	r10, r8
 a18:	44 c0       	rjmp	.+136    	; 0xaa2 <__stack+0x1a3>
 a1a:	85 37       	cpi	r24, 0x75	; 117
 a1c:	29 f4       	brne	.+10     	; 0xa28 <__stack+0x129>
 a1e:	2f 7e       	andi	r18, 0xEF	; 239
 a20:	b2 2e       	mov	r11, r18
 a22:	2a e0       	ldi	r18, 0x0A	; 10
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	25 c0       	rjmp	.+74     	; 0xa72 <__stack+0x173>
 a28:	f2 2f       	mov	r31, r18
 a2a:	f9 7f       	andi	r31, 0xF9	; 249
 a2c:	bf 2e       	mov	r11, r31
 a2e:	8f 36       	cpi	r24, 0x6F	; 111
 a30:	c1 f0       	breq	.+48     	; 0xa62 <__stack+0x163>
 a32:	18 f4       	brcc	.+6      	; 0xa3a <__stack+0x13b>
 a34:	88 35       	cpi	r24, 0x58	; 88
 a36:	79 f0       	breq	.+30     	; 0xa56 <__stack+0x157>
 a38:	b4 c0       	rjmp	.+360    	; 0xba2 <__stack+0x2a3>
 a3a:	80 37       	cpi	r24, 0x70	; 112
 a3c:	19 f0       	breq	.+6      	; 0xa44 <__stack+0x145>
 a3e:	88 37       	cpi	r24, 0x78	; 120
 a40:	21 f0       	breq	.+8      	; 0xa4a <__stack+0x14b>
 a42:	af c0       	rjmp	.+350    	; 0xba2 <__stack+0x2a3>
 a44:	2f 2f       	mov	r18, r31
 a46:	20 61       	ori	r18, 0x10	; 16
 a48:	b2 2e       	mov	r11, r18
 a4a:	b4 fe       	sbrs	r11, 4
 a4c:	0d c0       	rjmp	.+26     	; 0xa68 <__stack+0x169>
 a4e:	8b 2d       	mov	r24, r11
 a50:	84 60       	ori	r24, 0x04	; 4
 a52:	b8 2e       	mov	r11, r24
 a54:	09 c0       	rjmp	.+18     	; 0xa68 <__stack+0x169>
 a56:	24 ff       	sbrs	r18, 4
 a58:	0a c0       	rjmp	.+20     	; 0xa6e <__stack+0x16f>
 a5a:	9f 2f       	mov	r25, r31
 a5c:	96 60       	ori	r25, 0x06	; 6
 a5e:	b9 2e       	mov	r11, r25
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <__stack+0x16f>
 a62:	28 e0       	ldi	r18, 0x08	; 8
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	05 c0       	rjmp	.+10     	; 0xa72 <__stack+0x173>
 a68:	20 e1       	ldi	r18, 0x10	; 16
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <__stack+0x173>
 a6e:	20 e1       	ldi	r18, 0x10	; 16
 a70:	32 e0       	ldi	r19, 0x02	; 2
 a72:	f8 01       	movw	r30, r16
 a74:	b7 fe       	sbrs	r11, 7
 a76:	07 c0       	rjmp	.+14     	; 0xa86 <__stack+0x187>
 a78:	60 81       	ld	r22, Z
 a7a:	71 81       	ldd	r23, Z+1	; 0x01
 a7c:	82 81       	ldd	r24, Z+2	; 0x02
 a7e:	93 81       	ldd	r25, Z+3	; 0x03
 a80:	0c 5f       	subi	r16, 0xFC	; 252
 a82:	1f 4f       	sbci	r17, 0xFF	; 255
 a84:	06 c0       	rjmp	.+12     	; 0xa92 <__stack+0x193>
 a86:	60 81       	ld	r22, Z
 a88:	71 81       	ldd	r23, Z+1	; 0x01
 a8a:	80 e0       	ldi	r24, 0x00	; 0
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 5f       	subi	r16, 0xFE	; 254
 a90:	1f 4f       	sbci	r17, 0xFF	; 255
 a92:	a4 01       	movw	r20, r8
 a94:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__ultoa_invert>
 a98:	a8 2e       	mov	r10, r24
 a9a:	a8 18       	sub	r10, r8
 a9c:	fb 2d       	mov	r31, r11
 a9e:	ff 77       	andi	r31, 0x7F	; 127
 aa0:	bf 2e       	mov	r11, r31
 aa2:	b6 fe       	sbrs	r11, 6
 aa4:	0b c0       	rjmp	.+22     	; 0xabc <__stack+0x1bd>
 aa6:	2b 2d       	mov	r18, r11
 aa8:	2e 7f       	andi	r18, 0xFE	; 254
 aaa:	a5 14       	cp	r10, r5
 aac:	50 f4       	brcc	.+20     	; 0xac2 <__stack+0x1c3>
 aae:	b4 fe       	sbrs	r11, 4
 ab0:	0a c0       	rjmp	.+20     	; 0xac6 <__stack+0x1c7>
 ab2:	b2 fc       	sbrc	r11, 2
 ab4:	08 c0       	rjmp	.+16     	; 0xac6 <__stack+0x1c7>
 ab6:	2b 2d       	mov	r18, r11
 ab8:	2e 7e       	andi	r18, 0xEE	; 238
 aba:	05 c0       	rjmp	.+10     	; 0xac6 <__stack+0x1c7>
 abc:	7a 2c       	mov	r7, r10
 abe:	2b 2d       	mov	r18, r11
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <__stack+0x1c9>
 ac2:	7a 2c       	mov	r7, r10
 ac4:	01 c0       	rjmp	.+2      	; 0xac8 <__stack+0x1c9>
 ac6:	75 2c       	mov	r7, r5
 ac8:	24 ff       	sbrs	r18, 4
 aca:	0d c0       	rjmp	.+26     	; 0xae6 <__stack+0x1e7>
 acc:	fe 01       	movw	r30, r28
 ace:	ea 0d       	add	r30, r10
 ad0:	f1 1d       	adc	r31, r1
 ad2:	80 81       	ld	r24, Z
 ad4:	80 33       	cpi	r24, 0x30	; 48
 ad6:	11 f4       	brne	.+4      	; 0xadc <__stack+0x1dd>
 ad8:	29 7e       	andi	r18, 0xE9	; 233
 ada:	09 c0       	rjmp	.+18     	; 0xaee <__stack+0x1ef>
 adc:	22 ff       	sbrs	r18, 2
 ade:	06 c0       	rjmp	.+12     	; 0xaec <__stack+0x1ed>
 ae0:	73 94       	inc	r7
 ae2:	73 94       	inc	r7
 ae4:	04 c0       	rjmp	.+8      	; 0xaee <__stack+0x1ef>
 ae6:	82 2f       	mov	r24, r18
 ae8:	86 78       	andi	r24, 0x86	; 134
 aea:	09 f0       	breq	.+2      	; 0xaee <__stack+0x1ef>
 aec:	73 94       	inc	r7
 aee:	23 fd       	sbrc	r18, 3
 af0:	13 c0       	rjmp	.+38     	; 0xb18 <__stack+0x219>
 af2:	20 ff       	sbrs	r18, 0
 af4:	06 c0       	rjmp	.+12     	; 0xb02 <__stack+0x203>
 af6:	5a 2c       	mov	r5, r10
 af8:	73 14       	cp	r7, r3
 afa:	18 f4       	brcc	.+6      	; 0xb02 <__stack+0x203>
 afc:	53 0c       	add	r5, r3
 afe:	57 18       	sub	r5, r7
 b00:	73 2c       	mov	r7, r3
 b02:	73 14       	cp	r7, r3
 b04:	68 f4       	brcc	.+26     	; 0xb20 <__stack+0x221>
 b06:	b7 01       	movw	r22, r14
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	2c 87       	std	Y+12, r18	; 0x0c
 b0e:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 b12:	73 94       	inc	r7
 b14:	2c 85       	ldd	r18, Y+12	; 0x0c
 b16:	f5 cf       	rjmp	.-22     	; 0xb02 <__stack+0x203>
 b18:	73 14       	cp	r7, r3
 b1a:	10 f4       	brcc	.+4      	; 0xb20 <__stack+0x221>
 b1c:	37 18       	sub	r3, r7
 b1e:	01 c0       	rjmp	.+2      	; 0xb22 <__stack+0x223>
 b20:	31 2c       	mov	r3, r1
 b22:	24 ff       	sbrs	r18, 4
 b24:	12 c0       	rjmp	.+36     	; 0xb4a <__stack+0x24b>
 b26:	b7 01       	movw	r22, r14
 b28:	80 e3       	ldi	r24, 0x30	; 48
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	2c 87       	std	Y+12, r18	; 0x0c
 b2e:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 b32:	2c 85       	ldd	r18, Y+12	; 0x0c
 b34:	22 ff       	sbrs	r18, 2
 b36:	17 c0       	rjmp	.+46     	; 0xb66 <__stack+0x267>
 b38:	21 ff       	sbrs	r18, 1
 b3a:	03 c0       	rjmp	.+6      	; 0xb42 <__stack+0x243>
 b3c:	88 e5       	ldi	r24, 0x58	; 88
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <__stack+0x247>
 b42:	88 e7       	ldi	r24, 0x78	; 120
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	b7 01       	movw	r22, r14
 b48:	0c c0       	rjmp	.+24     	; 0xb62 <__stack+0x263>
 b4a:	82 2f       	mov	r24, r18
 b4c:	86 78       	andi	r24, 0x86	; 134
 b4e:	59 f0       	breq	.+22     	; 0xb66 <__stack+0x267>
 b50:	21 fd       	sbrc	r18, 1
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <__stack+0x259>
 b54:	80 e2       	ldi	r24, 0x20	; 32
 b56:	01 c0       	rjmp	.+2      	; 0xb5a <__stack+0x25b>
 b58:	8b e2       	ldi	r24, 0x2B	; 43
 b5a:	27 fd       	sbrc	r18, 7
 b5c:	8d e2       	ldi	r24, 0x2D	; 45
 b5e:	b7 01       	movw	r22, r14
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 b66:	a5 14       	cp	r10, r5
 b68:	38 f4       	brcc	.+14     	; 0xb78 <__stack+0x279>
 b6a:	b7 01       	movw	r22, r14
 b6c:	80 e3       	ldi	r24, 0x30	; 48
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 b74:	5a 94       	dec	r5
 b76:	f7 cf       	rjmp	.-18     	; 0xb66 <__stack+0x267>
 b78:	aa 94       	dec	r10
 b7a:	f4 01       	movw	r30, r8
 b7c:	ea 0d       	add	r30, r10
 b7e:	f1 1d       	adc	r31, r1
 b80:	80 81       	ld	r24, Z
 b82:	b7 01       	movw	r22, r14
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 b8a:	a1 10       	cpse	r10, r1
 b8c:	f5 cf       	rjmp	.-22     	; 0xb78 <__stack+0x279>
 b8e:	33 20       	and	r3, r3
 b90:	09 f4       	brne	.+2      	; 0xb94 <__stack+0x295>
 b92:	51 ce       	rjmp	.-862    	; 0x836 <vfprintf+0x24>
 b94:	b7 01       	movw	r22, r14
 b96:	80 e2       	ldi	r24, 0x20	; 32
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	0e 94 a3 03 	call	0x746	; 0x746 <fputc>
 b9e:	3a 94       	dec	r3
 ba0:	f6 cf       	rjmp	.-20     	; 0xb8e <__stack+0x28f>
 ba2:	f7 01       	movw	r30, r14
 ba4:	86 81       	ldd	r24, Z+6	; 0x06
 ba6:	97 81       	ldd	r25, Z+7	; 0x07
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <__stack+0x2af>
 baa:	8f ef       	ldi	r24, 0xFF	; 255
 bac:	9f ef       	ldi	r25, 0xFF	; 255
 bae:	2c 96       	adiw	r28, 0x0c	; 12
 bb0:	e2 e1       	ldi	r30, 0x12	; 18
 bb2:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__epilogue_restores__>

00000bb6 <strnlen_P>:
 bb6:	fc 01       	movw	r30, r24
 bb8:	05 90       	lpm	r0, Z+
 bba:	61 50       	subi	r22, 0x01	; 1
 bbc:	70 40       	sbci	r23, 0x00	; 0
 bbe:	01 10       	cpse	r0, r1
 bc0:	d8 f7       	brcc	.-10     	; 0xbb8 <strnlen_P+0x2>
 bc2:	80 95       	com	r24
 bc4:	90 95       	com	r25
 bc6:	8e 0f       	add	r24, r30
 bc8:	9f 1f       	adc	r25, r31
 bca:	08 95       	ret

00000bcc <strnlen>:
 bcc:	fc 01       	movw	r30, r24
 bce:	61 50       	subi	r22, 0x01	; 1
 bd0:	70 40       	sbci	r23, 0x00	; 0
 bd2:	01 90       	ld	r0, Z+
 bd4:	01 10       	cpse	r0, r1
 bd6:	d8 f7       	brcc	.-10     	; 0xbce <strnlen+0x2>
 bd8:	80 95       	com	r24
 bda:	90 95       	com	r25
 bdc:	8e 0f       	add	r24, r30
 bde:	9f 1f       	adc	r25, r31
 be0:	08 95       	ret

00000be2 <__ultoa_invert>:
 be2:	fa 01       	movw	r30, r20
 be4:	aa 27       	eor	r26, r26
 be6:	28 30       	cpi	r18, 0x08	; 8
 be8:	51 f1       	breq	.+84     	; 0xc3e <__ultoa_invert+0x5c>
 bea:	20 31       	cpi	r18, 0x10	; 16
 bec:	81 f1       	breq	.+96     	; 0xc4e <__ultoa_invert+0x6c>
 bee:	e8 94       	clt
 bf0:	6f 93       	push	r22
 bf2:	6e 7f       	andi	r22, 0xFE	; 254
 bf4:	6e 5f       	subi	r22, 0xFE	; 254
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	af 4f       	sbci	r26, 0xFF	; 255
 bfe:	b1 e0       	ldi	r27, 0x01	; 1
 c00:	3e d0       	rcall	.+124    	; 0xc7e <__ultoa_invert+0x9c>
 c02:	b4 e0       	ldi	r27, 0x04	; 4
 c04:	3c d0       	rcall	.+120    	; 0xc7e <__ultoa_invert+0x9c>
 c06:	67 0f       	add	r22, r23
 c08:	78 1f       	adc	r23, r24
 c0a:	89 1f       	adc	r24, r25
 c0c:	9a 1f       	adc	r25, r26
 c0e:	a1 1d       	adc	r26, r1
 c10:	68 0f       	add	r22, r24
 c12:	79 1f       	adc	r23, r25
 c14:	8a 1f       	adc	r24, r26
 c16:	91 1d       	adc	r25, r1
 c18:	a1 1d       	adc	r26, r1
 c1a:	6a 0f       	add	r22, r26
 c1c:	71 1d       	adc	r23, r1
 c1e:	81 1d       	adc	r24, r1
 c20:	91 1d       	adc	r25, r1
 c22:	a1 1d       	adc	r26, r1
 c24:	20 d0       	rcall	.+64     	; 0xc66 <__ultoa_invert+0x84>
 c26:	09 f4       	brne	.+2      	; 0xc2a <__ultoa_invert+0x48>
 c28:	68 94       	set
 c2a:	3f 91       	pop	r19
 c2c:	2a e0       	ldi	r18, 0x0A	; 10
 c2e:	26 9f       	mul	r18, r22
 c30:	11 24       	eor	r1, r1
 c32:	30 19       	sub	r19, r0
 c34:	30 5d       	subi	r19, 0xD0	; 208
 c36:	31 93       	st	Z+, r19
 c38:	de f6       	brtc	.-74     	; 0xbf0 <__ultoa_invert+0xe>
 c3a:	cf 01       	movw	r24, r30
 c3c:	08 95       	ret
 c3e:	46 2f       	mov	r20, r22
 c40:	47 70       	andi	r20, 0x07	; 7
 c42:	40 5d       	subi	r20, 0xD0	; 208
 c44:	41 93       	st	Z+, r20
 c46:	b3 e0       	ldi	r27, 0x03	; 3
 c48:	0f d0       	rcall	.+30     	; 0xc68 <__ultoa_invert+0x86>
 c4a:	c9 f7       	brne	.-14     	; 0xc3e <__ultoa_invert+0x5c>
 c4c:	f6 cf       	rjmp	.-20     	; 0xc3a <__ultoa_invert+0x58>
 c4e:	46 2f       	mov	r20, r22
 c50:	4f 70       	andi	r20, 0x0F	; 15
 c52:	40 5d       	subi	r20, 0xD0	; 208
 c54:	4a 33       	cpi	r20, 0x3A	; 58
 c56:	18 f0       	brcs	.+6      	; 0xc5e <__ultoa_invert+0x7c>
 c58:	49 5d       	subi	r20, 0xD9	; 217
 c5a:	31 fd       	sbrc	r19, 1
 c5c:	40 52       	subi	r20, 0x20	; 32
 c5e:	41 93       	st	Z+, r20
 c60:	02 d0       	rcall	.+4      	; 0xc66 <__ultoa_invert+0x84>
 c62:	a9 f7       	brne	.-22     	; 0xc4e <__ultoa_invert+0x6c>
 c64:	ea cf       	rjmp	.-44     	; 0xc3a <__ultoa_invert+0x58>
 c66:	b4 e0       	ldi	r27, 0x04	; 4
 c68:	a6 95       	lsr	r26
 c6a:	97 95       	ror	r25
 c6c:	87 95       	ror	r24
 c6e:	77 95       	ror	r23
 c70:	67 95       	ror	r22
 c72:	ba 95       	dec	r27
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__ultoa_invert+0x86>
 c76:	00 97       	sbiw	r24, 0x00	; 0
 c78:	61 05       	cpc	r22, r1
 c7a:	71 05       	cpc	r23, r1
 c7c:	08 95       	ret
 c7e:	9b 01       	movw	r18, r22
 c80:	ac 01       	movw	r20, r24
 c82:	0a 2e       	mov	r0, r26
 c84:	06 94       	lsr	r0
 c86:	57 95       	ror	r21
 c88:	47 95       	ror	r20
 c8a:	37 95       	ror	r19
 c8c:	27 95       	ror	r18
 c8e:	ba 95       	dec	r27
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__ultoa_invert+0xa2>
 c92:	62 0f       	add	r22, r18
 c94:	73 1f       	adc	r23, r19
 c96:	84 1f       	adc	r24, r20
 c98:	95 1f       	adc	r25, r21
 c9a:	a0 1d       	adc	r26, r0
 c9c:	08 95       	ret

00000c9e <__prologue_saves__>:
 c9e:	2f 92       	push	r2
 ca0:	3f 92       	push	r3
 ca2:	4f 92       	push	r4
 ca4:	5f 92       	push	r5
 ca6:	6f 92       	push	r6
 ca8:	7f 92       	push	r7
 caa:	8f 92       	push	r8
 cac:	9f 92       	push	r9
 cae:	af 92       	push	r10
 cb0:	bf 92       	push	r11
 cb2:	cf 92       	push	r12
 cb4:	df 92       	push	r13
 cb6:	ef 92       	push	r14
 cb8:	ff 92       	push	r15
 cba:	0f 93       	push	r16
 cbc:	1f 93       	push	r17
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
 cc2:	cd b7       	in	r28, 0x3d	; 61
 cc4:	de b7       	in	r29, 0x3e	; 62
 cc6:	ca 1b       	sub	r28, r26
 cc8:	db 0b       	sbc	r29, r27
 cca:	0f b6       	in	r0, 0x3f	; 63
 ccc:	f8 94       	cli
 cce:	de bf       	out	0x3e, r29	; 62
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	cd bf       	out	0x3d, r28	; 61
 cd4:	09 94       	ijmp

00000cd6 <__epilogue_restores__>:
 cd6:	2a 88       	ldd	r2, Y+18	; 0x12
 cd8:	39 88       	ldd	r3, Y+17	; 0x11
 cda:	48 88       	ldd	r4, Y+16	; 0x10
 cdc:	5f 84       	ldd	r5, Y+15	; 0x0f
 cde:	6e 84       	ldd	r6, Y+14	; 0x0e
 ce0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ce2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ce4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ce6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ce8:	b9 84       	ldd	r11, Y+9	; 0x09
 cea:	c8 84       	ldd	r12, Y+8	; 0x08
 cec:	df 80       	ldd	r13, Y+7	; 0x07
 cee:	ee 80       	ldd	r14, Y+6	; 0x06
 cf0:	fd 80       	ldd	r15, Y+5	; 0x05
 cf2:	0c 81       	ldd	r16, Y+4	; 0x04
 cf4:	1b 81       	ldd	r17, Y+3	; 0x03
 cf6:	aa 81       	ldd	r26, Y+2	; 0x02
 cf8:	b9 81       	ldd	r27, Y+1	; 0x01
 cfa:	ce 0f       	add	r28, r30
 cfc:	d1 1d       	adc	r29, r1
 cfe:	0f b6       	in	r0, 0x3f	; 63
 d00:	f8 94       	cli
 d02:	de bf       	out	0x3e, r29	; 62
 d04:	0f be       	out	0x3f, r0	; 63
 d06:	cd bf       	out	0x3d, r28	; 61
 d08:	ed 01       	movw	r28, r26
 d0a:	08 95       	ret

00000d0c <_exit>:
 d0c:	f8 94       	cli

00000d0e <__stop_program>:
 d0e:	ff cf       	rjmp	.-2      	; 0xd0e <__stop_program>
