
ModbusRTU_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000bee  00000c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080015a  0080015a  00000cdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013b3  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085b  00000000  00000000  0000221b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000782  00000000  00000000  00002a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  000031f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c6  00000000  00000000  000038b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	be 00       	.word	0x00be	; ????
  6a:	10 01       	movw	r2, r0
  6c:	10 01       	movw	r2, r0
  6e:	10 01       	movw	r2, r0
  70:	10 01       	movw	r2, r0
  72:	10 01       	movw	r2, r0
  74:	10 01       	movw	r2, r0
  76:	10 01       	movw	r2, r0
  78:	be 00       	.word	0x00be	; ????
  7a:	10 01       	movw	r2, r0
  7c:	10 01       	movw	r2, r0
  7e:	10 01       	movw	r2, r0
  80:	10 01       	movw	r2, r0
  82:	10 01       	movw	r2, r0
  84:	10 01       	movw	r2, r0
  86:	10 01       	movw	r2, r0
  88:	c0 00       	.word	0x00c0	; ????
  8a:	10 01       	movw	r2, r0
  8c:	10 01       	movw	r2, r0
  8e:	10 01       	movw	r2, r0
  90:	10 01       	movw	r2, r0
  92:	10 01       	movw	r2, r0
  94:	10 01       	movw	r2, r0
  96:	10 01       	movw	r2, r0
  98:	10 01       	movw	r2, r0
  9a:	10 01       	movw	r2, r0
  9c:	10 01       	movw	r2, r0
  9e:	10 01       	movw	r2, r0
  a0:	10 01       	movw	r2, r0
  a2:	10 01       	movw	r2, r0
  a4:	10 01       	movw	r2, r0
  a6:	10 01       	movw	r2, r0
  a8:	c0 00       	.word	0x00c0	; ????
  aa:	10 01       	movw	r2, r0
  ac:	10 01       	movw	r2, r0
  ae:	10 01       	movw	r2, r0
  b0:	10 01       	movw	r2, r0
  b2:	10 01       	movw	r2, r0
  b4:	10 01       	movw	r2, r0
  b6:	10 01       	movw	r2, r0
  b8:	10 01       	movw	r2, r0
  ba:	10 01       	movw	r2, r0
  bc:	10 01       	movw	r2, r0
  be:	10 01       	movw	r2, r0
  c0:	10 01       	movw	r2, r0
  c2:	10 01       	movw	r2, r0
  c4:	10 01       	movw	r2, r0
  c6:	10 01       	movw	r2, r0
  c8:	0c 01       	movw	r0, r24
  ca:	10 01       	movw	r2, r0
  cc:	10 01       	movw	r2, r0
  ce:	10 01       	movw	r2, r0
  d0:	10 01       	movw	r2, r0
  d2:	10 01       	movw	r2, r0
  d4:	10 01       	movw	r2, r0
  d6:	10 01       	movw	r2, r0
  d8:	e9 00       	.word	0x00e9	; ????
  da:	10 01       	movw	r2, r0
  dc:	10 01       	movw	r2, r0
  de:	10 01       	movw	r2, r0
  e0:	10 01       	movw	r2, r0
  e2:	10 01       	movw	r2, r0
  e4:	10 01       	movw	r2, r0
  e6:	10 01       	movw	r2, r0
  e8:	10 01       	movw	r2, r0
  ea:	10 01       	movw	r2, r0
  ec:	10 01       	movw	r2, r0
  ee:	10 01       	movw	r2, r0
  f0:	10 01       	movw	r2, r0
  f2:	10 01       	movw	r2, r0
  f4:	10 01       	movw	r2, r0
  f6:	10 01       	movw	r2, r0
  f8:	dd 00       	.word	0x00dd	; ????
  fa:	10 01       	movw	r2, r0
  fc:	10 01       	movw	r2, r0
  fe:	10 01       	movw	r2, r0
 100:	10 01       	movw	r2, r0
 102:	10 01       	movw	r2, r0
 104:	10 01       	movw	r2, r0
 106:	10 01       	movw	r2, r0
 108:	fb 00       	.word	0x00fb	; ????

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	ee ee       	ldi	r30, 0xEE	; 238
 11e:	fb e0       	ldi	r31, 0x0B	; 11
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	aa 35       	cpi	r26, 0x5A	; 90
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	aa e5       	ldi	r26, 0x5A	; 90
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a5 36       	cpi	r26, 0x65	; 101
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <main>
 140:	0c 94 f5 05 	jmp	0xbea	; 0xbea <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 162:	80 91 b9 00 	lds	r24, 0x00B9
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	38 97       	sbiw	r30, 0x08	; 8
 16c:	e1 35       	cpi	r30, 0x51	; 81
 16e:	f1 05       	cpc	r31, r1
 170:	08 f0       	brcs	.+2      	; 0x174 <__vector_24+0x2c>
 172:	56 c0       	rjmp	.+172    	; 0x220 <__vector_24+0xd8>
 174:	ec 5c       	subi	r30, 0xCC	; 204
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 17c:	10 92 5a 01 	sts	0x015A, r1
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 180:	e0 91 5a 01 	lds	r30, 0x015A
 184:	80 91 5c 01 	lds	r24, 0x015C
 188:	e8 17       	cp	r30, r24
 18a:	70 f4       	brcc	.+28     	; 0x1a8 <__vector_24+0x60>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	8e 0f       	add	r24, r30
 190:	80 93 5a 01 	sts	0x015A, r24
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e3 5a       	subi	r30, 0xA3	; 163
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	80 81       	ld	r24, Z
 19c:	80 93 bb 00 	sts	0x00BB, r24
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1a0:	85 e8       	ldi	r24, 0x85	; 133
 1a2:	80 93 bc 00 	sts	0x00BC, r24
 1a6:	43 c0       	rjmp	.+134    	; 0x22e <__vector_24+0xe6>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 1a8:	80 91 5b 01 	lds	r24, 0x015B
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 93 5b 01 	sts	0x015B, r24
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1b2:	84 e9       	ldi	r24, 0x94	; 148
 1b4:	80 93 bc 00 	sts	0x00BC, r24
 1b8:	3a c0       	rjmp	.+116    	; 0x22e <__vector_24+0xe6>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 1ba:	e0 91 5a 01 	lds	r30, 0x015A
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	8e 0f       	add	r24, r30
 1c2:	80 93 5a 01 	sts	0x015A, r24
 1c6:	80 91 bb 00 	lds	r24, 0x00BB
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	e3 5a       	subi	r30, 0xA3	; 163
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 1d2:	20 91 5a 01 	lds	r18, 0x015A
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	80 91 5c 01 	lds	r24, 0x015C
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	28 17       	cp	r18, r24
 1e2:	39 07       	cpc	r19, r25
 1e4:	24 f4       	brge	.+8      	; 0x1ee <__vector_24+0xa6>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1e6:	85 ec       	ldi	r24, 0xC5	; 197
 1e8:	80 93 bc 00 	sts	0x00BC, r24
 1ec:	20 c0       	rjmp	.+64     	; 0x22e <__vector_24+0xe6>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1ee:	85 e8       	ldi	r24, 0x85	; 133
 1f0:	80 93 bc 00 	sts	0x00BC, r24
 1f4:	1c c0       	rjmp	.+56     	; 0x22e <__vector_24+0xe6>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 1f6:	80 91 bb 00 	lds	r24, 0x00BB
 1fa:	e0 91 5a 01 	lds	r30, 0x015A
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e3 5a       	subi	r30, 0xA3	; 163
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 206:	80 91 5b 01 	lds	r24, 0x015B
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	80 93 5b 01 	sts	0x015B, r24
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 210:	84 e9       	ldi	r24, 0x94	; 148
 212:	80 93 bc 00 	sts	0x00BC, r24
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 216:	0b c0       	rjmp	.+22     	; 0x22e <__vector_24+0xe6>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 218:	85 ea       	ldi	r24, 0xA5	; 165
 21a:	80 93 bc 00 	sts	0x00BC, r24
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 21e:	07 c0       	rjmp	.+14     	; 0x22e <__vector_24+0xe6>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 220:	80 91 b9 00 	lds	r24, 0x00B9
 224:	80 93 00 01 	sts	0x0100, r24
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	80 93 bc 00 	sts	0x00BC, r24
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <get_usart_stream>:
FILE usart_str = FDEV_SETUP_STREAM(usart_putchar, NULL, _FDEV_SETUP_WRITE);

/* Return stream pointer  */
FILE * get_usart_stream(){
	return &usart_str;
}
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	08 95       	ret

0000024e <USART_Init>:

void USART_Init(uint16_t bauds){

	USART_0->UBRR_H = (uint8_t) (bauds >> 8);
 24e:	e0 ec       	ldi	r30, 0xC0	; 192
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	95 83       	std	Z+5, r25	; 0x05
	USART_0->UBRR_L = bauds;
 254:	84 83       	std	Z+4, r24	; 0x04

	/* Disable double speed  */
	USART_0->UCSR_A = 0;
 256:	10 82       	st	Z, r1
	/* Enable TX and RX */
	USART_0->UCSR_B = SET(RXEN0) | SET(TXEN0) | SET(RXCIE0);
 258:	88 e9       	ldi	r24, 0x98	; 152
 25a:	81 83       	std	Z+1, r24	; 0x01
	/* Asynchronous mode:
	 * - 8 data bits
	 * - 1 stop bit
	 * - no parity 	 */
	USART_0->UCSR_C = SET(UCSZ01) | SET(UCSZ00);
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	82 83       	std	Z+2, r24	; 0x02
 260:	08 95       	ret

00000262 <USART_tx>:

/* Send one byte: busy waiting */
void USART_tx(uint8_t data) {

	/* Wait until hardware is ready */
	while (!(USART_0->UCSR_A & (1 << UDRE0)));
 262:	e0 ec       	ldi	r30, 0xC0	; 192
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	95 ff       	sbrs	r25, 5
 26a:	fd cf       	rjmp	.-6      	; 0x266 <USART_tx+0x4>

	USART_0->UDR_ = data;
 26c:	e0 ec       	ldi	r30, 0xC0	; 192
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	86 83       	std	Z+6, r24	; 0x06
 272:	08 95       	ret

00000274 <usart_putchar>:
	return USART_0->UDR_;
}


static int usart_putchar(char c, FILE *fp){
	USART_tx(c);
 274:	0e 94 31 01 	call	0x262	; 0x262 <USART_tx>

	return 0;
}
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret

0000027e <USART_rx>:

/* Receive one byte: busy waiting */
uint8_t USART_rx() {

	/* Wait until something arrive  */
	while (!(USART_0->UCSR_A & (1 << RXC0)));
 27e:	e0 ec       	ldi	r30, 0xC0	; 192
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 23       	and	r24, r24
 286:	ec f7       	brge	.-6      	; 0x282 <USART_rx+0x4>

	return USART_0->UDR_;
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	86 81       	ldd	r24, Z+6	; 0x06
}
 28e:	08 95       	ret

00000290 <inic_stream>:
  *
  * @retval FILE: ponteiro do stream para utiliza com fprintf.
  */
FILE * inic_stream(){
	return &lcd_str;
}
 290:	8f e0       	ldi	r24, 0x0F	; 15
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	08 95       	ret

00000296 <cmd_LCD>:
  *
  * @retval Nenhum
  */
void cmd_LCD(uint8_t c, uint8_t cd)				//c é o dado  e cd indica se é instrução ou caractere
{
    if(cd==0)
 296:	61 11       	cpse	r22, r1
 298:	02 c0       	rjmp	.+4      	; 0x29e <cmd_LCD+0x8>
        CLR_BIT(CONTR_LCD->PORT,RS);
 29a:	28 98       	cbi	0x05, 0	; 5
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <cmd_LCD+0xa>
    else
        SET_BIT(CONTR_LCD->PORT,RS);
 29e:	28 9a       	sbi	0x05, 0	; 5

    //primeiro nibble de dados - 4 MSB
    //compila código para os pinos de dados do LCD nos 4 MSB do PORT
    #if (NIBBLE_DADOS)
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0x0F)|(0xF0 & c);
 2a0:	9b b1       	in	r25, 0x0b	; 11
 2a2:	9f 70       	andi	r25, 0x0F	; 15
 2a4:	28 2f       	mov	r18, r24
 2a6:	20 7f       	andi	r18, 0xF0	; 240
 2a8:	92 2b       	or	r25, r18
 2aa:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	45 e0       	ldi	r20, 0x05	; 5
 2ae:	4a 95       	dec	r20
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <cmd_LCD+0x18>
 2b2:	00 00       	nop
    #else
        //compila código para os pinos de dados do LCD nos 4 LSB do POR
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0xF0)|(c>>4);
    #endif
    
    PULSO_ENABLE();
 2b4:	29 9a       	sbi	0x05, 1	; 5
 2b6:	95 e0       	ldi	r25, 0x05	; 5
 2b8:	9a 95       	dec	r25
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <cmd_LCD+0x22>
 2bc:	00 00       	nop
 2be:	29 98       	cbi	0x05, 1	; 5
 2c0:	40 ef       	ldi	r20, 0xF0	; 240
 2c2:	4a 95       	dec	r20
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <cmd_LCD+0x2c>

    //segundo nibble de dados - 4 LSB
    #if (NIBBLE_DADOS)								
        //compila código para os pinos de dados do LCD nos 4 MSB do PORT
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0x0F) | (0xF0 & (c<<4));
 2c6:	9b b1       	in	r25, 0x0b	; 11
 2c8:	40 e1       	ldi	r20, 0x10	; 16
 2ca:	84 9f       	mul	r24, r20
 2cc:	90 01       	movw	r18, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	9f 70       	andi	r25, 0x0F	; 15
 2d2:	29 2b       	or	r18, r25
 2d4:	2b b9       	out	0x0b, r18	; 11
 2d6:	95 e0       	ldi	r25, 0x05	; 5
 2d8:	9a 95       	dec	r25
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <cmd_LCD+0x42>
 2dc:	00 00       	nop
    #else
        //compila código para os pinos de dados do LCD nos 4 LSB do PORT
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0xF0) | (0x0F & c);
    #endif
    
    PULSO_ENABLE();
 2de:	29 9a       	sbi	0x05, 1	; 5
 2e0:	45 e0       	ldi	r20, 0x05	; 5
 2e2:	4a 95       	dec	r20
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <cmd_LCD+0x4c>
 2e6:	00 00       	nop
 2e8:	29 98       	cbi	0x05, 1	; 5
 2ea:	90 ef       	ldi	r25, 0xF0	; 240
 2ec:	9a 95       	dec	r25
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <cmd_LCD+0x56>
    
    //se for instrução de retorno ou limpeza espera LCD estar pronto
    if((cd==0) && (c<4))
 2f0:	61 11       	cpse	r22, r1
 2f2:	08 c0       	rjmp	.+16     	; 0x304 <cmd_LCD+0x6e>
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	30 f4       	brcc	.+12     	; 0x304 <cmd_LCD+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	9f e1       	ldi	r25, 0x1F	; 31
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <cmd_LCD+0x66>
 300:	00 c0       	rjmp	.+0      	; 0x302 <cmd_LCD+0x6c>
 302:	00 00       	nop
 304:	08 95       	ret

00000306 <lcd_putchar>:
  * @param fp: ponteiro do stream inicilizado que receberá o dado.
  *
  * @retval int maior que zero se sucesso.
  */
int lcd_putchar(char c, FILE *fp){
	cmd_LCD(c,1);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>

	return 1;
}
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	08 95       	ret

00000312 <inic_LCD_4bits>:
{
    //sequência ditada pelo fabricando do circuito integrado HD44780
    //o LCD será só escrito. Então, R/W é sempre zero.
    
    /* Configura pinos de controle */
    SET_BIT(CONTR_LCD->DDR, RS);
 312:	20 9a       	sbi	0x04, 0	; 4
    SET_BIT(CONTR_LCD->DDR, E);
 314:	21 9a       	sbi	0x04, 1	; 4

    /* Configure pinos de dados */
    #if (NIBBLE_DADOS)
        DADOS_LCD->DDR |=  0xF0;
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	80 6f       	ori	r24, 0xF0	; 240
 31a:	8a b9       	out	0x0a, r24	; 10
    #else
        DADOS_LCD->DDR |=  0x0F;
    #endif

    //RS em zero indicando que o dado para o LCD será uma instrução
    CLR_BIT(CONTR_LCD->PORT,RS);
 31c:	28 98       	cbi	0x05, 0	; 5
    //pino de habilitação em zero
    CLR_BIT(CONTR_LCD->PORT,E);
 31e:	29 98       	cbi	0x05, 1	; 5
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	89 ef       	ldi	r24, 0xF9	; 249
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <inic_LCD_4bits+0x14>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <inic_LCD_4bits+0x1e>
 330:	00 00       	nop
    //ser maior). 
    _delay_ms(20);

    //interface de 8 bits
    #if (NIBBLE_DADOS)
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0x0F) | 0x30;
 332:	8b b1       	in	r24, 0x0b	; 11
 334:	8f 70       	andi	r24, 0x0F	; 15
 336:	80 63       	ori	r24, 0x30	; 48
 338:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	25 e0       	ldi	r18, 0x05	; 5
 33c:	2a 95       	dec	r18
 33e:	f1 f7       	brne	.-4      	; 0x33c <inic_LCD_4bits+0x2a>
 340:	00 00       	nop
    #else
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0xF0) | 0x03;
    #endif

    //habilitação respeitando os tempos de resposta do LCD
    PULSO_ENABLE();			
 342:	29 9a       	sbi	0x05, 1	; 5
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <inic_LCD_4bits+0x34>
 34a:	00 00       	nop
 34c:	29 98       	cbi	0x05, 1	; 5
 34e:	90 ef       	ldi	r25, 0xF0	; 240
 350:	9a 95       	dec	r25
 352:	f1 f7       	brne	.-4      	; 0x350 <inic_LCD_4bits+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	8f e1       	ldi	r24, 0x1F	; 31
 356:	9e e4       	ldi	r25, 0x4E	; 78
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <inic_LCD_4bits+0x46>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <inic_LCD_4bits+0x4c>
 35e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	95 e0       	ldi	r25, 0x05	; 5
 362:	9a 95       	dec	r25
 364:	f1 f7       	brne	.-4      	; 0x362 <inic_LCD_4bits+0x50>
 366:	00 00       	nop
    _delay_ms(5);		
    PULSO_ENABLE();
 368:	29 9a       	sbi	0x05, 1	; 5
 36a:	25 e0       	ldi	r18, 0x05	; 5
 36c:	2a 95       	dec	r18
 36e:	f1 f7       	brne	.-4      	; 0x36c <inic_LCD_4bits+0x5a>
 370:	00 00       	nop
 372:	29 98       	cbi	0x05, 1	; 5
 374:	80 ef       	ldi	r24, 0xF0	; 240
 376:	8a 95       	dec	r24
 378:	f1 f7       	brne	.-4      	; 0x376 <inic_LCD_4bits+0x64>
 37a:	8f e1       	ldi	r24, 0x1F	; 31
 37c:	93 e0       	ldi	r25, 0x03	; 3
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <inic_LCD_4bits+0x6c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <inic_LCD_4bits+0x72>
 384:	00 00       	nop
 386:	95 e0       	ldi	r25, 0x05	; 5
 388:	9a 95       	dec	r25
 38a:	f1 f7       	brne	.-4      	; 0x388 <inic_LCD_4bits+0x76>
 38c:	00 00       	nop
    _delay_us(200);
    PULSO_ENABLE();
 38e:	29 9a       	sbi	0x05, 1	; 5
 390:	25 e0       	ldi	r18, 0x05	; 5
 392:	2a 95       	dec	r18
 394:	f1 f7       	brne	.-4      	; 0x392 <inic_LCD_4bits+0x80>
 396:	00 00       	nop
 398:	29 98       	cbi	0x05, 1	; 5
 39a:	80 ef       	ldi	r24, 0xF0	; 240
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <inic_LCD_4bits+0x8a>
    * estabilização da tensão (geralmente funciona). Se o LCD não for inicializado primeiro no 
    * modo de 8 bits, haverá problemas se o microcontrolador for inicializado e o display já o tiver sido.*/
    
    //interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
    #if (NIBBLE_DADOS)
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0x0F) | 0x20;
 3a0:	8b b1       	in	r24, 0x0b	; 11
 3a2:	8f 70       	andi	r24, 0x0F	; 15
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	8b b9       	out	0x0b, r24	; 11
 3a8:	95 e0       	ldi	r25, 0x05	; 5
 3aa:	9a 95       	dec	r25
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <inic_LCD_4bits+0x98>
 3ae:	00 00       	nop
    #else
        DADOS_LCD->PORT = (DADOS_LCD->PORT & 0xF0) | 0x02;
    #endif
    
    PULSO_ENABLE();
 3b0:	29 9a       	sbi	0x05, 1	; 5
 3b2:	25 e0       	ldi	r18, 0x05	; 5
 3b4:	2a 95       	dec	r18
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <inic_LCD_4bits+0xa2>
 3b8:	00 00       	nop
 3ba:	29 98       	cbi	0x05, 1	; 5
 3bc:	80 ef       	ldi	r24, 0xF0	; 240
 3be:	8a 95       	dec	r24
 3c0:	f1 f7       	brne	.-4      	; 0x3be <inic_LCD_4bits+0xac>
    //interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
    cmd_LCD(0x28,0);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	88 e2       	ldi	r24, 0x28	; 40
 3c6:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>

    //são enviados os 2 nibbles (0x2 e 0x8)
    
    //desliga o display
    cmd_LCD(0x08,0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
    //limpa todo o display
    cmd_LCD(0x01,0);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
    //mensagem aparente cursor inativo não piscando   
    cmd_LCD(0x0C,0);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	8c e0       	ldi	r24, 0x0C	; 12
 3de:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
    //inicializa cursor na primeira posição a esquerda - 1a linha
    cmd_LCD(0x80,0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	80 e8       	ldi	r24, 0x80	; 128
 3e6:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
 3ea:	08 95       	ret

000003ec <main>:
// 
// 	/* Mensagem incial: terminal do Proteus
// 	 * utiliza final de linha com '\r' */
// 	fprintf(debug,"Teste de debug\n\r");

	modbus_rtu_init();
 3ec:	0e 94 ff 01 	call	0x3fe	; 0x3fe <modbus_rtu_init>
    while(1){
        //TODO:: Please write your application code 
		
		/* Vai para primeira linha/coluna */
		cmd_LCD(0x80,0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	0e 94 4b 01 	call	0x296	; 0x296 <cmd_LCD>
		/* Imprime msg */
		//fprintf(lcd_stream,"%d", x++);
		
// 		x = USART_rx();
// 		fprintf(debug,"%c\n\r", x);
		modbus_rtu_read();
 3f8:	0e 94 12 02 	call	0x424	; 0x424 <modbus_rtu_read>
 3fc:	f9 cf       	rjmp	.-14     	; 0x3f0 <main+0x4>

000003fe <modbus_rtu_init>:
	uint8_t data[2];						//Big Endian
	uint8_t crc[2];							//Big Endian
};

void modbus_rtu_init(){
	lcd_stream = inic_stream();
 3fe:	0e 94 48 01 	call	0x290	; 0x290 <inic_stream>
 402:	90 93 62 01 	sts	0x0162, r25
 406:	80 93 61 01 	sts	0x0161, r24
	debug = get_usart_stream();
 40a:	0e 94 24 01 	call	0x248	; 0x248 <get_usart_stream>
 40e:	90 93 64 01 	sts	0x0164, r25
 412:	80 93 63 01 	sts	0x0163, r24
	inic_LCD_4bits();
 416:	0e 94 89 01 	call	0x312	; 0x312 <inic_LCD_4bits>
	USART_Init(BAUD);
 41a:	87 e6       	ldi	r24, 0x67	; 103
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Init>
 422:	08 95       	ret

00000424 <modbus_rtu_read>:
}

uint16_t modbus_rtu_read(){
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	29 97       	sbiw	r28, 0x09	; 9
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
	//frame_t *f = malloc(sizeof(frame_t));	
	frame_t f;
	fprintf(debug,"Modbus:\n\r");
 448:	20 91 63 01 	lds	r18, 0x0163
 44c:	30 91 64 01 	lds	r19, 0x0164
 450:	49 e0       	ldi	r20, 0x09	; 9
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	8d e1       	ldi	r24, 0x1D	; 29
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 12 03 	call	0x624	; 0x624 <fwrite>
 460:	8e 01       	movw	r16, r28
 462:	0f 5f       	subi	r16, 0xFF	; 255
 464:	1f 4f       	sbci	r17, 0xFF	; 255
 466:	7e 01       	movw	r14, r28
 468:	89 e0       	ldi	r24, 0x09	; 9
 46a:	e8 0e       	add	r14, r24
 46c:	f1 1c       	adc	r15, r1
	uint8_t buff[9];
	
	for(uint8_t i=0; i<8; i++){
		buff[i] = USART_rx();		//Receive one byte
 46e:	0e 94 3f 01 	call	0x27e	; 0x27e <USART_rx>
 472:	f8 01       	movw	r30, r16
 474:	81 93       	st	Z+, r24
 476:	8f 01       	movw	r16, r30
	//frame_t *f = malloc(sizeof(frame_t));	
	frame_t f;
	fprintf(debug,"Modbus:\n\r");
	uint8_t buff[9];
	
	for(uint8_t i=0; i<8; i++){
 478:	ee 15       	cp	r30, r14
 47a:	ff 05       	cpc	r31, r15
 47c:	c1 f7       	brne	.-16     	; 0x46e <modbus_rtu_read+0x4a>
		buff[i] = USART_rx();		//Receive one byte
	}

	f.addr = buff[0];
	f.cmd = buff[1];
 47e:	fa 80       	ldd	r15, Y+2	; 0x02
	//f.reg = (buff[2] << 8) | buff[3];
	f.reg[0] = buff[2];
 480:	0b 81       	ldd	r16, Y+3	; 0x03
	f.reg[1] = buff[3];	
 482:	1c 81       	ldd	r17, Y+4	; 0x04
	f.data[0] = buff[4];
 484:	dd 80       	ldd	r13, Y+5	; 0x05
	f.data[1] = buff[5];
 486:	ce 80       	ldd	r12, Y+6	; 0x06
	//f.crc = (buff[6] << 8) | buff[7];
	f.crc[0] = buff[6];
 488:	af 80       	ldd	r10, Y+7	; 0x07
	f.crc[1] = buff[7];
 48a:	b8 84       	ldd	r11, Y+8	; 0x08
	
#if DEBUG
	fprintf(debug,"Addr: %c\n\r", f.addr);
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	1f 92       	push	r1
 490:	8f 93       	push	r24
 492:	87 e2       	ldi	r24, 0x27	; 39
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	9f 93       	push	r25
 498:	8f 93       	push	r24
 49a:	80 91 64 01 	lds	r24, 0x0164
 49e:	8f 93       	push	r24
 4a0:	80 91 63 01 	lds	r24, 0x0163
 4a4:	8f 93       	push	r24
 4a6:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"Cmd: %c\n\r", f.cmd);
 4aa:	1f 92       	push	r1
 4ac:	ff 92       	push	r15
 4ae:	82 e3       	ldi	r24, 0x32	; 50
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	9f 93       	push	r25
 4b4:	8f 93       	push	r24
 4b6:	80 91 64 01 	lds	r24, 0x0164
 4ba:	8f 93       	push	r24
 4bc:	80 91 63 01 	lds	r24, 0x0163
 4c0:	8f 93       	push	r24
 4c2:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"Reg: %c", f.reg[0]);
 4c6:	1f 92       	push	r1
 4c8:	0f 93       	push	r16
 4ca:	8c e3       	ldi	r24, 0x3C	; 60
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	9f 93       	push	r25
 4d0:	8f 93       	push	r24
 4d2:	80 91 64 01 	lds	r24, 0x0164
 4d6:	8f 93       	push	r24
 4d8:	80 91 63 01 	lds	r24, 0x0163
 4dc:	8f 93       	push	r24
 4de:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"%c\n\r", f.reg[1]);
 4e2:	1f 92       	push	r1
 4e4:	1f 93       	push	r17
 4e6:	07 e3       	ldi	r16, 0x37	; 55
 4e8:	11 e0       	ldi	r17, 0x01	; 1
 4ea:	1f 93       	push	r17
 4ec:	0f 93       	push	r16
 4ee:	80 91 64 01 	lds	r24, 0x0164
 4f2:	8f 93       	push	r24
 4f4:	80 91 63 01 	lds	r24, 0x0163
 4f8:	8f 93       	push	r24
 4fa:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"Data: %c", f.data[0]);
 4fe:	1f 92       	push	r1
 500:	df 92       	push	r13
 502:	0f 2e       	mov	r0, r31
 504:	f4 e4       	ldi	r31, 0x44	; 68
 506:	ef 2e       	mov	r14, r31
 508:	f1 e0       	ldi	r31, 0x01	; 1
 50a:	ff 2e       	mov	r15, r31
 50c:	f0 2d       	mov	r31, r0
 50e:	ff 92       	push	r15
 510:	ef 92       	push	r14
 512:	80 91 64 01 	lds	r24, 0x0164
 516:	8f 93       	push	r24
 518:	80 91 63 01 	lds	r24, 0x0163
 51c:	8f 93       	push	r24
 51e:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"%c\n\r", f.data[1]);
 522:	1f 92       	push	r1
 524:	cf 92       	push	r12
 526:	1f 93       	push	r17
 528:	0f 93       	push	r16
 52a:	80 91 64 01 	lds	r24, 0x0164
 52e:	8f 93       	push	r24
 530:	80 91 63 01 	lds	r24, 0x0163
 534:	8f 93       	push	r24
 536:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"CRC: %c", f.crc[0]);
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	1f 92       	push	r1
 546:	af 92       	push	r10
 548:	8d e4       	ldi	r24, 0x4D	; 77
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	9f 93       	push	r25
 54e:	8f 93       	push	r24
 550:	80 91 64 01 	lds	r24, 0x0164
 554:	8f 93       	push	r24
 556:	80 91 63 01 	lds	r24, 0x0163
 55a:	8f 93       	push	r24
 55c:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"%c\n\r", f.crc[1]);
 560:	1f 92       	push	r1
 562:	bf 92       	push	r11
 564:	1f 93       	push	r17
 566:	0f 93       	push	r16
 568:	80 91 64 01 	lds	r24, 0x0164
 56c:	8f 93       	push	r24
 56e:	80 91 63 01 	lds	r24, 0x0163
 572:	8f 93       	push	r24
 574:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"%s\r", &buff);
 578:	ce 01       	movw	r24, r28
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	9f 93       	push	r25
 57e:	8f 93       	push	r24
 580:	85 e5       	ldi	r24, 0x55	; 85
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	9f 93       	push	r25
 586:	8f 93       	push	r24
 588:	80 91 64 01 	lds	r24, 0x0164
 58c:	8f 93       	push	r24
 58e:	80 91 63 01 	lds	r24, 0x0163
 592:	8f 93       	push	r24
 594:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	nibble_data(f.data);
	fprintf(debug,"Data: %c", f.data[0]);
 598:	1f 92       	push	r1
 59a:	cf 92       	push	r12
 59c:	ff 92       	push	r15
 59e:	ef 92       	push	r14
 5a0:	80 91 64 01 	lds	r24, 0x0164
 5a4:	8f 93       	push	r24
 5a6:	80 91 63 01 	lds	r24, 0x0163
 5aa:	8f 93       	push	r24
 5ac:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
	fprintf(debug,"%c\n\r", f.data[1]);
 5b0:	1f 92       	push	r1
 5b2:	df 92       	push	r13
 5b4:	1f 93       	push	r17
 5b6:	0f 93       	push	r16
 5b8:	80 91 64 01 	lds	r24, 0x0164
 5bc:	8f 93       	push	r24
 5be:	80 91 63 01 	lds	r24, 0x0163
 5c2:	8f 93       	push	r24
 5c4:	0e 94 00 03 	call	0x600	; 0x600 <fprintf>
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	de bf       	out	0x3e, r29	; 62
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	cd bf       	out	0x3d, r28	; 61
#endif
}
 5d2:	29 96       	adiw	r28, 0x09	; 9
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	bf 90       	pop	r11
 5f0:	af 90       	pop	r10
 5f2:	08 95       	ret

000005f4 <__tablejump2__>:
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31

000005f8 <__tablejump__>:
 5f8:	05 90       	lpm	r0, Z+
 5fa:	f4 91       	lpm	r31, Z
 5fc:	e0 2d       	mov	r30, r0
 5fe:	09 94       	ijmp

00000600 <fprintf>:
 600:	a0 e0       	ldi	r26, 0x00	; 0
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e6 e0       	ldi	r30, 0x06	; 6
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__prologue_saves__+0x20>
 60c:	ae 01       	movw	r20, r28
 60e:	47 5f       	subi	r20, 0xF7	; 247
 610:	5f 4f       	sbci	r21, 0xFF	; 255
 612:	6f 81       	ldd	r22, Y+7	; 0x07
 614:	78 85       	ldd	r23, Y+8	; 0x08
 616:	8d 81       	ldd	r24, Y+5	; 0x05
 618:	9e 81       	ldd	r25, Y+6	; 0x06
 61a:	0e 94 46 03 	call	0x68c	; 0x68c <vfprintf>
 61e:	e2 e0       	ldi	r30, 0x02	; 2
 620:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__epilogue_restores__+0x20>

00000624 <fwrite>:
 624:	a0 e0       	ldi	r26, 0x00	; 0
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e8 e1       	ldi	r30, 0x18	; 24
 62a:	f3 e0       	ldi	r31, 0x03	; 3
 62c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__prologue_saves__+0xc>
 630:	6b 01       	movw	r12, r22
 632:	4a 01       	movw	r8, r20
 634:	79 01       	movw	r14, r18
 636:	d9 01       	movw	r26, r18
 638:	13 96       	adiw	r26, 0x03	; 3
 63a:	2c 91       	ld	r18, X
 63c:	21 ff       	sbrs	r18, 1
 63e:	1d c0       	rjmp	.+58     	; 0x67a <fwrite+0x56>
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0
 644:	c8 15       	cp	r28, r8
 646:	d9 05       	cpc	r29, r9
 648:	d9 f0       	breq	.+54     	; 0x680 <fwrite+0x5c>
 64a:	8c 01       	movw	r16, r24
 64c:	5c 01       	movw	r10, r24
 64e:	ac 0c       	add	r10, r12
 650:	bd 1c       	adc	r11, r13
 652:	c8 01       	movw	r24, r16
 654:	0a 15       	cp	r16, r10
 656:	1b 05       	cpc	r17, r11
 658:	71 f0       	breq	.+28     	; 0x676 <fwrite+0x52>
 65a:	0f 5f       	subi	r16, 0xFF	; 255
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	d7 01       	movw	r26, r14
 660:	18 96       	adiw	r26, 0x08	; 8
 662:	ed 91       	ld	r30, X+
 664:	fc 91       	ld	r31, X
 666:	19 97       	sbiw	r26, 0x09	; 9
 668:	b7 01       	movw	r22, r14
 66a:	dc 01       	movw	r26, r24
 66c:	8c 91       	ld	r24, X
 66e:	09 95       	icall
 670:	89 2b       	or	r24, r25
 672:	79 f3       	breq	.-34     	; 0x652 <fwrite+0x2e>
 674:	05 c0       	rjmp	.+10     	; 0x680 <fwrite+0x5c>
 676:	21 96       	adiw	r28, 0x01	; 1
 678:	e5 cf       	rjmp	.-54     	; 0x644 <fwrite+0x20>
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	01 c0       	rjmp	.+2      	; 0x682 <fwrite+0x5e>
 680:	ce 01       	movw	r24, r28
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	ec e0       	ldi	r30, 0x0C	; 12
 688:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__epilogue_restores__+0xc>

0000068c <vfprintf>:
 68c:	ac e0       	ldi	r26, 0x0C	; 12
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	ec e4       	ldi	r30, 0x4C	; 76
 692:	f3 e0       	ldi	r31, 0x03	; 3
 694:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__prologue_saves__>
 698:	7c 01       	movw	r14, r24
 69a:	6b 01       	movw	r12, r22
 69c:	8a 01       	movw	r16, r20
 69e:	fc 01       	movw	r30, r24
 6a0:	17 82       	std	Z+7, r1	; 0x07
 6a2:	16 82       	std	Z+6, r1	; 0x06
 6a4:	83 81       	ldd	r24, Z+3	; 0x03
 6a6:	81 ff       	sbrs	r24, 1
 6a8:	bd c1       	rjmp	.+890    	; 0xa24 <__stack+0x125>
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	4c 01       	movw	r8, r24
 6b0:	f7 01       	movw	r30, r14
 6b2:	93 81       	ldd	r25, Z+3	; 0x03
 6b4:	f6 01       	movw	r30, r12
 6b6:	93 fd       	sbrc	r25, 3
 6b8:	85 91       	lpm	r24, Z+
 6ba:	93 ff       	sbrs	r25, 3
 6bc:	81 91       	ld	r24, Z+
 6be:	6f 01       	movw	r12, r30
 6c0:	88 23       	and	r24, r24
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <vfprintf+0x3a>
 6c4:	ab c1       	rjmp	.+854    	; 0xa1c <__stack+0x11d>
 6c6:	85 32       	cpi	r24, 0x25	; 37
 6c8:	39 f4       	brne	.+14     	; 0x6d8 <vfprintf+0x4c>
 6ca:	93 fd       	sbrc	r25, 3
 6cc:	85 91       	lpm	r24, Z+
 6ce:	93 ff       	sbrs	r25, 3
 6d0:	81 91       	ld	r24, Z+
 6d2:	6f 01       	movw	r12, r30
 6d4:	85 32       	cpi	r24, 0x25	; 37
 6d6:	29 f4       	brne	.+10     	; 0x6e2 <vfprintf+0x56>
 6d8:	b7 01       	movw	r22, r14
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 6e0:	e7 cf       	rjmp	.-50     	; 0x6b0 <vfprintf+0x24>
 6e2:	51 2c       	mov	r5, r1
 6e4:	31 2c       	mov	r3, r1
 6e6:	20 e0       	ldi	r18, 0x00	; 0
 6e8:	20 32       	cpi	r18, 0x20	; 32
 6ea:	a0 f4       	brcc	.+40     	; 0x714 <vfprintf+0x88>
 6ec:	8b 32       	cpi	r24, 0x2B	; 43
 6ee:	69 f0       	breq	.+26     	; 0x70a <vfprintf+0x7e>
 6f0:	30 f4       	brcc	.+12     	; 0x6fe <vfprintf+0x72>
 6f2:	80 32       	cpi	r24, 0x20	; 32
 6f4:	59 f0       	breq	.+22     	; 0x70c <vfprintf+0x80>
 6f6:	83 32       	cpi	r24, 0x23	; 35
 6f8:	69 f4       	brne	.+26     	; 0x714 <vfprintf+0x88>
 6fa:	20 61       	ori	r18, 0x10	; 16
 6fc:	2c c0       	rjmp	.+88     	; 0x756 <vfprintf+0xca>
 6fe:	8d 32       	cpi	r24, 0x2D	; 45
 700:	39 f0       	breq	.+14     	; 0x710 <vfprintf+0x84>
 702:	80 33       	cpi	r24, 0x30	; 48
 704:	39 f4       	brne	.+14     	; 0x714 <vfprintf+0x88>
 706:	21 60       	ori	r18, 0x01	; 1
 708:	26 c0       	rjmp	.+76     	; 0x756 <vfprintf+0xca>
 70a:	22 60       	ori	r18, 0x02	; 2
 70c:	24 60       	ori	r18, 0x04	; 4
 70e:	23 c0       	rjmp	.+70     	; 0x756 <vfprintf+0xca>
 710:	28 60       	ori	r18, 0x08	; 8
 712:	21 c0       	rjmp	.+66     	; 0x756 <vfprintf+0xca>
 714:	27 fd       	sbrc	r18, 7
 716:	27 c0       	rjmp	.+78     	; 0x766 <vfprintf+0xda>
 718:	30 ed       	ldi	r19, 0xD0	; 208
 71a:	38 0f       	add	r19, r24
 71c:	3a 30       	cpi	r19, 0x0A	; 10
 71e:	78 f4       	brcc	.+30     	; 0x73e <vfprintf+0xb2>
 720:	26 ff       	sbrs	r18, 6
 722:	06 c0       	rjmp	.+12     	; 0x730 <vfprintf+0xa4>
 724:	fa e0       	ldi	r31, 0x0A	; 10
 726:	5f 9e       	mul	r5, r31
 728:	30 0d       	add	r19, r0
 72a:	11 24       	eor	r1, r1
 72c:	53 2e       	mov	r5, r19
 72e:	13 c0       	rjmp	.+38     	; 0x756 <vfprintf+0xca>
 730:	8a e0       	ldi	r24, 0x0A	; 10
 732:	38 9e       	mul	r3, r24
 734:	30 0d       	add	r19, r0
 736:	11 24       	eor	r1, r1
 738:	33 2e       	mov	r3, r19
 73a:	20 62       	ori	r18, 0x20	; 32
 73c:	0c c0       	rjmp	.+24     	; 0x756 <vfprintf+0xca>
 73e:	8e 32       	cpi	r24, 0x2E	; 46
 740:	21 f4       	brne	.+8      	; 0x74a <vfprintf+0xbe>
 742:	26 fd       	sbrc	r18, 6
 744:	6b c1       	rjmp	.+726    	; 0xa1c <__stack+0x11d>
 746:	20 64       	ori	r18, 0x40	; 64
 748:	06 c0       	rjmp	.+12     	; 0x756 <vfprintf+0xca>
 74a:	8c 36       	cpi	r24, 0x6C	; 108
 74c:	11 f4       	brne	.+4      	; 0x752 <vfprintf+0xc6>
 74e:	20 68       	ori	r18, 0x80	; 128
 750:	02 c0       	rjmp	.+4      	; 0x756 <vfprintf+0xca>
 752:	88 36       	cpi	r24, 0x68	; 104
 754:	41 f4       	brne	.+16     	; 0x766 <vfprintf+0xda>
 756:	f6 01       	movw	r30, r12
 758:	93 fd       	sbrc	r25, 3
 75a:	85 91       	lpm	r24, Z+
 75c:	93 ff       	sbrs	r25, 3
 75e:	81 91       	ld	r24, Z+
 760:	6f 01       	movw	r12, r30
 762:	81 11       	cpse	r24, r1
 764:	c1 cf       	rjmp	.-126    	; 0x6e8 <vfprintf+0x5c>
 766:	98 2f       	mov	r25, r24
 768:	9f 7d       	andi	r25, 0xDF	; 223
 76a:	95 54       	subi	r25, 0x45	; 69
 76c:	93 30       	cpi	r25, 0x03	; 3
 76e:	28 f4       	brcc	.+10     	; 0x77a <vfprintf+0xee>
 770:	0c 5f       	subi	r16, 0xFC	; 252
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	ff e3       	ldi	r31, 0x3F	; 63
 776:	f9 83       	std	Y+1, r31	; 0x01
 778:	0d c0       	rjmp	.+26     	; 0x794 <vfprintf+0x108>
 77a:	83 36       	cpi	r24, 0x63	; 99
 77c:	31 f0       	breq	.+12     	; 0x78a <vfprintf+0xfe>
 77e:	83 37       	cpi	r24, 0x73	; 115
 780:	71 f0       	breq	.+28     	; 0x79e <vfprintf+0x112>
 782:	83 35       	cpi	r24, 0x53	; 83
 784:	09 f0       	breq	.+2      	; 0x788 <vfprintf+0xfc>
 786:	5b c0       	rjmp	.+182    	; 0x83e <vfprintf+0x1b2>
 788:	22 c0       	rjmp	.+68     	; 0x7ce <vfprintf+0x142>
 78a:	f8 01       	movw	r30, r16
 78c:	80 81       	ld	r24, Z
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	0e 5f       	subi	r16, 0xFE	; 254
 792:	1f 4f       	sbci	r17, 0xFF	; 255
 794:	44 24       	eor	r4, r4
 796:	43 94       	inc	r4
 798:	51 2c       	mov	r5, r1
 79a:	54 01       	movw	r10, r8
 79c:	15 c0       	rjmp	.+42     	; 0x7c8 <vfprintf+0x13c>
 79e:	38 01       	movw	r6, r16
 7a0:	f2 e0       	ldi	r31, 0x02	; 2
 7a2:	6f 0e       	add	r6, r31
 7a4:	71 1c       	adc	r7, r1
 7a6:	f8 01       	movw	r30, r16
 7a8:	a0 80       	ld	r10, Z
 7aa:	b1 80       	ldd	r11, Z+1	; 0x01
 7ac:	26 ff       	sbrs	r18, 6
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <vfprintf+0x12a>
 7b0:	65 2d       	mov	r22, r5
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <vfprintf+0x12e>
 7b6:	6f ef       	ldi	r22, 0xFF	; 255
 7b8:	7f ef       	ldi	r23, 0xFF	; 255
 7ba:	c5 01       	movw	r24, r10
 7bc:	2c 87       	std	Y+12, r18	; 0x0c
 7be:	0e 94 23 05 	call	0xa46	; 0xa46 <strnlen>
 7c2:	2c 01       	movw	r4, r24
 7c4:	83 01       	movw	r16, r6
 7c6:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c8:	2f 77       	andi	r18, 0x7F	; 127
 7ca:	22 2e       	mov	r2, r18
 7cc:	17 c0       	rjmp	.+46     	; 0x7fc <vfprintf+0x170>
 7ce:	38 01       	movw	r6, r16
 7d0:	f2 e0       	ldi	r31, 0x02	; 2
 7d2:	6f 0e       	add	r6, r31
 7d4:	71 1c       	adc	r7, r1
 7d6:	f8 01       	movw	r30, r16
 7d8:	a0 80       	ld	r10, Z
 7da:	b1 80       	ldd	r11, Z+1	; 0x01
 7dc:	26 ff       	sbrs	r18, 6
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <vfprintf+0x15a>
 7e0:	65 2d       	mov	r22, r5
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <vfprintf+0x15e>
 7e6:	6f ef       	ldi	r22, 0xFF	; 255
 7e8:	7f ef       	ldi	r23, 0xFF	; 255
 7ea:	c5 01       	movw	r24, r10
 7ec:	2c 87       	std	Y+12, r18	; 0x0c
 7ee:	0e 94 18 05 	call	0xa30	; 0xa30 <strnlen_P>
 7f2:	2c 01       	movw	r4, r24
 7f4:	2c 85       	ldd	r18, Y+12	; 0x0c
 7f6:	20 68       	ori	r18, 0x80	; 128
 7f8:	22 2e       	mov	r2, r18
 7fa:	83 01       	movw	r16, r6
 7fc:	23 fc       	sbrc	r2, 3
 7fe:	1b c0       	rjmp	.+54     	; 0x836 <vfprintf+0x1aa>
 800:	83 2d       	mov	r24, r3
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	48 16       	cp	r4, r24
 806:	59 06       	cpc	r5, r25
 808:	b0 f4       	brcc	.+44     	; 0x836 <vfprintf+0x1aa>
 80a:	b7 01       	movw	r22, r14
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 814:	3a 94       	dec	r3
 816:	f4 cf       	rjmp	.-24     	; 0x800 <vfprintf+0x174>
 818:	f5 01       	movw	r30, r10
 81a:	27 fc       	sbrc	r2, 7
 81c:	85 91       	lpm	r24, Z+
 81e:	27 fe       	sbrs	r2, 7
 820:	81 91       	ld	r24, Z+
 822:	5f 01       	movw	r10, r30
 824:	b7 01       	movw	r22, r14
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 82c:	31 10       	cpse	r3, r1
 82e:	3a 94       	dec	r3
 830:	f1 e0       	ldi	r31, 0x01	; 1
 832:	4f 1a       	sub	r4, r31
 834:	51 08       	sbc	r5, r1
 836:	41 14       	cp	r4, r1
 838:	51 04       	cpc	r5, r1
 83a:	71 f7       	brne	.-36     	; 0x818 <vfprintf+0x18c>
 83c:	e5 c0       	rjmp	.+458    	; 0xa08 <__stack+0x109>
 83e:	84 36       	cpi	r24, 0x64	; 100
 840:	11 f0       	breq	.+4      	; 0x846 <vfprintf+0x1ba>
 842:	89 36       	cpi	r24, 0x69	; 105
 844:	39 f5       	brne	.+78     	; 0x894 <vfprintf+0x208>
 846:	f8 01       	movw	r30, r16
 848:	27 ff       	sbrs	r18, 7
 84a:	07 c0       	rjmp	.+14     	; 0x85a <vfprintf+0x1ce>
 84c:	60 81       	ld	r22, Z
 84e:	71 81       	ldd	r23, Z+1	; 0x01
 850:	82 81       	ldd	r24, Z+2	; 0x02
 852:	93 81       	ldd	r25, Z+3	; 0x03
 854:	0c 5f       	subi	r16, 0xFC	; 252
 856:	1f 4f       	sbci	r17, 0xFF	; 255
 858:	08 c0       	rjmp	.+16     	; 0x86a <vfprintf+0x1de>
 85a:	60 81       	ld	r22, Z
 85c:	71 81       	ldd	r23, Z+1	; 0x01
 85e:	88 27       	eor	r24, r24
 860:	77 fd       	sbrc	r23, 7
 862:	80 95       	com	r24
 864:	98 2f       	mov	r25, r24
 866:	0e 5f       	subi	r16, 0xFE	; 254
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	2f 76       	andi	r18, 0x6F	; 111
 86c:	b2 2e       	mov	r11, r18
 86e:	97 ff       	sbrs	r25, 7
 870:	09 c0       	rjmp	.+18     	; 0x884 <vfprintf+0x1f8>
 872:	90 95       	com	r25
 874:	80 95       	com	r24
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	20 68       	ori	r18, 0x80	; 128
 882:	b2 2e       	mov	r11, r18
 884:	2a e0       	ldi	r18, 0x0A	; 10
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	a4 01       	movw	r20, r8
 88a:	0e 94 60 05 	call	0xac0	; 0xac0 <__ultoa_invert>
 88e:	a8 2e       	mov	r10, r24
 890:	a8 18       	sub	r10, r8
 892:	44 c0       	rjmp	.+136    	; 0x91c <__stack+0x1d>
 894:	85 37       	cpi	r24, 0x75	; 117
 896:	29 f4       	brne	.+10     	; 0x8a2 <vfprintf+0x216>
 898:	2f 7e       	andi	r18, 0xEF	; 239
 89a:	b2 2e       	mov	r11, r18
 89c:	2a e0       	ldi	r18, 0x0A	; 10
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	25 c0       	rjmp	.+74     	; 0x8ec <vfprintf+0x260>
 8a2:	f2 2f       	mov	r31, r18
 8a4:	f9 7f       	andi	r31, 0xF9	; 249
 8a6:	bf 2e       	mov	r11, r31
 8a8:	8f 36       	cpi	r24, 0x6F	; 111
 8aa:	c1 f0       	breq	.+48     	; 0x8dc <vfprintf+0x250>
 8ac:	18 f4       	brcc	.+6      	; 0x8b4 <vfprintf+0x228>
 8ae:	88 35       	cpi	r24, 0x58	; 88
 8b0:	79 f0       	breq	.+30     	; 0x8d0 <vfprintf+0x244>
 8b2:	b4 c0       	rjmp	.+360    	; 0xa1c <__stack+0x11d>
 8b4:	80 37       	cpi	r24, 0x70	; 112
 8b6:	19 f0       	breq	.+6      	; 0x8be <vfprintf+0x232>
 8b8:	88 37       	cpi	r24, 0x78	; 120
 8ba:	21 f0       	breq	.+8      	; 0x8c4 <vfprintf+0x238>
 8bc:	af c0       	rjmp	.+350    	; 0xa1c <__stack+0x11d>
 8be:	2f 2f       	mov	r18, r31
 8c0:	20 61       	ori	r18, 0x10	; 16
 8c2:	b2 2e       	mov	r11, r18
 8c4:	b4 fe       	sbrs	r11, 4
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <vfprintf+0x256>
 8c8:	8b 2d       	mov	r24, r11
 8ca:	84 60       	ori	r24, 0x04	; 4
 8cc:	b8 2e       	mov	r11, r24
 8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <vfprintf+0x256>
 8d0:	24 ff       	sbrs	r18, 4
 8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <vfprintf+0x25c>
 8d4:	9f 2f       	mov	r25, r31
 8d6:	96 60       	ori	r25, 0x06	; 6
 8d8:	b9 2e       	mov	r11, r25
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <vfprintf+0x25c>
 8dc:	28 e0       	ldi	r18, 0x08	; 8
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	05 c0       	rjmp	.+10     	; 0x8ec <vfprintf+0x260>
 8e2:	20 e1       	ldi	r18, 0x10	; 16
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x260>
 8e8:	20 e1       	ldi	r18, 0x10	; 16
 8ea:	32 e0       	ldi	r19, 0x02	; 2
 8ec:	f8 01       	movw	r30, r16
 8ee:	b7 fe       	sbrs	r11, 7
 8f0:	07 c0       	rjmp	.+14     	; 0x900 <__stack+0x1>
 8f2:	60 81       	ld	r22, Z
 8f4:	71 81       	ldd	r23, Z+1	; 0x01
 8f6:	82 81       	ldd	r24, Z+2	; 0x02
 8f8:	93 81       	ldd	r25, Z+3	; 0x03
 8fa:	0c 5f       	subi	r16, 0xFC	; 252
 8fc:	1f 4f       	sbci	r17, 0xFF	; 255
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
 900:	60 81       	ld	r22, Z
 902:	71 81       	ldd	r23, Z+1	; 0x01
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 5f       	subi	r16, 0xFE	; 254
 90a:	1f 4f       	sbci	r17, 0xFF	; 255
 90c:	a4 01       	movw	r20, r8
 90e:	0e 94 60 05 	call	0xac0	; 0xac0 <__ultoa_invert>
 912:	a8 2e       	mov	r10, r24
 914:	a8 18       	sub	r10, r8
 916:	fb 2d       	mov	r31, r11
 918:	ff 77       	andi	r31, 0x7F	; 127
 91a:	bf 2e       	mov	r11, r31
 91c:	b6 fe       	sbrs	r11, 6
 91e:	0b c0       	rjmp	.+22     	; 0x936 <__stack+0x37>
 920:	2b 2d       	mov	r18, r11
 922:	2e 7f       	andi	r18, 0xFE	; 254
 924:	a5 14       	cp	r10, r5
 926:	50 f4       	brcc	.+20     	; 0x93c <__stack+0x3d>
 928:	b4 fe       	sbrs	r11, 4
 92a:	0a c0       	rjmp	.+20     	; 0x940 <__stack+0x41>
 92c:	b2 fc       	sbrc	r11, 2
 92e:	08 c0       	rjmp	.+16     	; 0x940 <__stack+0x41>
 930:	2b 2d       	mov	r18, r11
 932:	2e 7e       	andi	r18, 0xEE	; 238
 934:	05 c0       	rjmp	.+10     	; 0x940 <__stack+0x41>
 936:	7a 2c       	mov	r7, r10
 938:	2b 2d       	mov	r18, r11
 93a:	03 c0       	rjmp	.+6      	; 0x942 <__stack+0x43>
 93c:	7a 2c       	mov	r7, r10
 93e:	01 c0       	rjmp	.+2      	; 0x942 <__stack+0x43>
 940:	75 2c       	mov	r7, r5
 942:	24 ff       	sbrs	r18, 4
 944:	0d c0       	rjmp	.+26     	; 0x960 <__stack+0x61>
 946:	fe 01       	movw	r30, r28
 948:	ea 0d       	add	r30, r10
 94a:	f1 1d       	adc	r31, r1
 94c:	80 81       	ld	r24, Z
 94e:	80 33       	cpi	r24, 0x30	; 48
 950:	11 f4       	brne	.+4      	; 0x956 <__stack+0x57>
 952:	29 7e       	andi	r18, 0xE9	; 233
 954:	09 c0       	rjmp	.+18     	; 0x968 <__stack+0x69>
 956:	22 ff       	sbrs	r18, 2
 958:	06 c0       	rjmp	.+12     	; 0x966 <__stack+0x67>
 95a:	73 94       	inc	r7
 95c:	73 94       	inc	r7
 95e:	04 c0       	rjmp	.+8      	; 0x968 <__stack+0x69>
 960:	82 2f       	mov	r24, r18
 962:	86 78       	andi	r24, 0x86	; 134
 964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x69>
 966:	73 94       	inc	r7
 968:	23 fd       	sbrc	r18, 3
 96a:	13 c0       	rjmp	.+38     	; 0x992 <__stack+0x93>
 96c:	20 ff       	sbrs	r18, 0
 96e:	06 c0       	rjmp	.+12     	; 0x97c <__stack+0x7d>
 970:	5a 2c       	mov	r5, r10
 972:	73 14       	cp	r7, r3
 974:	18 f4       	brcc	.+6      	; 0x97c <__stack+0x7d>
 976:	53 0c       	add	r5, r3
 978:	57 18       	sub	r5, r7
 97a:	73 2c       	mov	r7, r3
 97c:	73 14       	cp	r7, r3
 97e:	68 f4       	brcc	.+26     	; 0x99a <__stack+0x9b>
 980:	b7 01       	movw	r22, r14
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	2c 87       	std	Y+12, r18	; 0x0c
 988:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 98c:	73 94       	inc	r7
 98e:	2c 85       	ldd	r18, Y+12	; 0x0c
 990:	f5 cf       	rjmp	.-22     	; 0x97c <__stack+0x7d>
 992:	73 14       	cp	r7, r3
 994:	10 f4       	brcc	.+4      	; 0x99a <__stack+0x9b>
 996:	37 18       	sub	r3, r7
 998:	01 c0       	rjmp	.+2      	; 0x99c <__stack+0x9d>
 99a:	31 2c       	mov	r3, r1
 99c:	24 ff       	sbrs	r18, 4
 99e:	12 c0       	rjmp	.+36     	; 0x9c4 <__stack+0xc5>
 9a0:	b7 01       	movw	r22, r14
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	2c 87       	std	Y+12, r18	; 0x0c
 9a8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 9ac:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ae:	22 ff       	sbrs	r18, 2
 9b0:	17 c0       	rjmp	.+46     	; 0x9e0 <__stack+0xe1>
 9b2:	21 ff       	sbrs	r18, 1
 9b4:	03 c0       	rjmp	.+6      	; 0x9bc <__stack+0xbd>
 9b6:	88 e5       	ldi	r24, 0x58	; 88
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	88 e7       	ldi	r24, 0x78	; 120
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	b7 01       	movw	r22, r14
 9c2:	0c c0       	rjmp	.+24     	; 0x9dc <__stack+0xdd>
 9c4:	82 2f       	mov	r24, r18
 9c6:	86 78       	andi	r24, 0x86	; 134
 9c8:	59 f0       	breq	.+22     	; 0x9e0 <__stack+0xe1>
 9ca:	21 fd       	sbrc	r18, 1
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__stack+0xd3>
 9ce:	80 e2       	ldi	r24, 0x20	; 32
 9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <__stack+0xd5>
 9d2:	8b e2       	ldi	r24, 0x2B	; 43
 9d4:	27 fd       	sbrc	r18, 7
 9d6:	8d e2       	ldi	r24, 0x2D	; 45
 9d8:	b7 01       	movw	r22, r14
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 9e0:	a5 14       	cp	r10, r5
 9e2:	38 f4       	brcc	.+14     	; 0x9f2 <__stack+0xf3>
 9e4:	b7 01       	movw	r22, r14
 9e6:	80 e3       	ldi	r24, 0x30	; 48
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 9ee:	5a 94       	dec	r5
 9f0:	f7 cf       	rjmp	.-18     	; 0x9e0 <__stack+0xe1>
 9f2:	aa 94       	dec	r10
 9f4:	f4 01       	movw	r30, r8
 9f6:	ea 0d       	add	r30, r10
 9f8:	f1 1d       	adc	r31, r1
 9fa:	80 81       	ld	r24, Z
 9fc:	b7 01       	movw	r22, r14
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 a04:	a1 10       	cpse	r10, r1
 a06:	f5 cf       	rjmp	.-22     	; 0x9f2 <__stack+0xf3>
 a08:	33 20       	and	r3, r3
 a0a:	09 f4       	brne	.+2      	; 0xa0e <__stack+0x10f>
 a0c:	51 ce       	rjmp	.-862    	; 0x6b0 <vfprintf+0x24>
 a0e:	b7 01       	movw	r22, r14
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 2e 05 	call	0xa5c	; 0xa5c <fputc>
 a18:	3a 94       	dec	r3
 a1a:	f6 cf       	rjmp	.-20     	; 0xa08 <__stack+0x109>
 a1c:	f7 01       	movw	r30, r14
 a1e:	86 81       	ldd	r24, Z+6	; 0x06
 a20:	97 81       	ldd	r25, Z+7	; 0x07
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <__stack+0x129>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	9f ef       	ldi	r25, 0xFF	; 255
 a28:	2c 96       	adiw	r28, 0x0c	; 12
 a2a:	e2 e1       	ldi	r30, 0x12	; 18
 a2c:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__epilogue_restores__>

00000a30 <strnlen_P>:
 a30:	fc 01       	movw	r30, r24
 a32:	05 90       	lpm	r0, Z+
 a34:	61 50       	subi	r22, 0x01	; 1
 a36:	70 40       	sbci	r23, 0x00	; 0
 a38:	01 10       	cpse	r0, r1
 a3a:	d8 f7       	brcc	.-10     	; 0xa32 <strnlen_P+0x2>
 a3c:	80 95       	com	r24
 a3e:	90 95       	com	r25
 a40:	8e 0f       	add	r24, r30
 a42:	9f 1f       	adc	r25, r31
 a44:	08 95       	ret

00000a46 <strnlen>:
 a46:	fc 01       	movw	r30, r24
 a48:	61 50       	subi	r22, 0x01	; 1
 a4a:	70 40       	sbci	r23, 0x00	; 0
 a4c:	01 90       	ld	r0, Z+
 a4e:	01 10       	cpse	r0, r1
 a50:	d8 f7       	brcc	.-10     	; 0xa48 <strnlen+0x2>
 a52:	80 95       	com	r24
 a54:	90 95       	com	r25
 a56:	8e 0f       	add	r24, r30
 a58:	9f 1f       	adc	r25, r31
 a5a:	08 95       	ret

00000a5c <fputc>:
 a5c:	0f 93       	push	r16
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
 a64:	18 2f       	mov	r17, r24
 a66:	09 2f       	mov	r16, r25
 a68:	eb 01       	movw	r28, r22
 a6a:	8b 81       	ldd	r24, Y+3	; 0x03
 a6c:	81 fd       	sbrc	r24, 1
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <fputc+0x1a>
 a70:	8f ef       	ldi	r24, 0xFF	; 255
 a72:	9f ef       	ldi	r25, 0xFF	; 255
 a74:	20 c0       	rjmp	.+64     	; 0xab6 <fputc+0x5a>
 a76:	82 ff       	sbrs	r24, 2
 a78:	10 c0       	rjmp	.+32     	; 0xa9a <fputc+0x3e>
 a7a:	4e 81       	ldd	r20, Y+6	; 0x06
 a7c:	5f 81       	ldd	r21, Y+7	; 0x07
 a7e:	2c 81       	ldd	r18, Y+4	; 0x04
 a80:	3d 81       	ldd	r19, Y+5	; 0x05
 a82:	42 17       	cp	r20, r18
 a84:	53 07       	cpc	r21, r19
 a86:	7c f4       	brge	.+30     	; 0xaa6 <fputc+0x4a>
 a88:	e8 81       	ld	r30, Y
 a8a:	f9 81       	ldd	r31, Y+1	; 0x01
 a8c:	9f 01       	movw	r18, r30
 a8e:	2f 5f       	subi	r18, 0xFF	; 255
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	39 83       	std	Y+1, r19	; 0x01
 a94:	28 83       	st	Y, r18
 a96:	10 83       	st	Z, r17
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <fputc+0x4a>
 a9a:	e8 85       	ldd	r30, Y+8	; 0x08
 a9c:	f9 85       	ldd	r31, Y+9	; 0x09
 a9e:	81 2f       	mov	r24, r17
 aa0:	09 95       	icall
 aa2:	89 2b       	or	r24, r25
 aa4:	29 f7       	brne	.-54     	; 0xa70 <fputc+0x14>
 aa6:	2e 81       	ldd	r18, Y+6	; 0x06
 aa8:	3f 81       	ldd	r19, Y+7	; 0x07
 aaa:	2f 5f       	subi	r18, 0xFF	; 255
 aac:	3f 4f       	sbci	r19, 0xFF	; 255
 aae:	3f 83       	std	Y+7, r19	; 0x07
 ab0:	2e 83       	std	Y+6, r18	; 0x06
 ab2:	81 2f       	mov	r24, r17
 ab4:	90 2f       	mov	r25, r16
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	1f 91       	pop	r17
 abc:	0f 91       	pop	r16
 abe:	08 95       	ret

00000ac0 <__ultoa_invert>:
 ac0:	fa 01       	movw	r30, r20
 ac2:	aa 27       	eor	r26, r26
 ac4:	28 30       	cpi	r18, 0x08	; 8
 ac6:	51 f1       	breq	.+84     	; 0xb1c <__ultoa_invert+0x5c>
 ac8:	20 31       	cpi	r18, 0x10	; 16
 aca:	81 f1       	breq	.+96     	; 0xb2c <__ultoa_invert+0x6c>
 acc:	e8 94       	clt
 ace:	6f 93       	push	r22
 ad0:	6e 7f       	andi	r22, 0xFE	; 254
 ad2:	6e 5f       	subi	r22, 0xFE	; 254
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	af 4f       	sbci	r26, 0xFF	; 255
 adc:	b1 e0       	ldi	r27, 0x01	; 1
 ade:	3e d0       	rcall	.+124    	; 0xb5c <__ultoa_invert+0x9c>
 ae0:	b4 e0       	ldi	r27, 0x04	; 4
 ae2:	3c d0       	rcall	.+120    	; 0xb5c <__ultoa_invert+0x9c>
 ae4:	67 0f       	add	r22, r23
 ae6:	78 1f       	adc	r23, r24
 ae8:	89 1f       	adc	r24, r25
 aea:	9a 1f       	adc	r25, r26
 aec:	a1 1d       	adc	r26, r1
 aee:	68 0f       	add	r22, r24
 af0:	79 1f       	adc	r23, r25
 af2:	8a 1f       	adc	r24, r26
 af4:	91 1d       	adc	r25, r1
 af6:	a1 1d       	adc	r26, r1
 af8:	6a 0f       	add	r22, r26
 afa:	71 1d       	adc	r23, r1
 afc:	81 1d       	adc	r24, r1
 afe:	91 1d       	adc	r25, r1
 b00:	a1 1d       	adc	r26, r1
 b02:	20 d0       	rcall	.+64     	; 0xb44 <__ultoa_invert+0x84>
 b04:	09 f4       	brne	.+2      	; 0xb08 <__ultoa_invert+0x48>
 b06:	68 94       	set
 b08:	3f 91       	pop	r19
 b0a:	2a e0       	ldi	r18, 0x0A	; 10
 b0c:	26 9f       	mul	r18, r22
 b0e:	11 24       	eor	r1, r1
 b10:	30 19       	sub	r19, r0
 b12:	30 5d       	subi	r19, 0xD0	; 208
 b14:	31 93       	st	Z+, r19
 b16:	de f6       	brtc	.-74     	; 0xace <__ultoa_invert+0xe>
 b18:	cf 01       	movw	r24, r30
 b1a:	08 95       	ret
 b1c:	46 2f       	mov	r20, r22
 b1e:	47 70       	andi	r20, 0x07	; 7
 b20:	40 5d       	subi	r20, 0xD0	; 208
 b22:	41 93       	st	Z+, r20
 b24:	b3 e0       	ldi	r27, 0x03	; 3
 b26:	0f d0       	rcall	.+30     	; 0xb46 <__ultoa_invert+0x86>
 b28:	c9 f7       	brne	.-14     	; 0xb1c <__ultoa_invert+0x5c>
 b2a:	f6 cf       	rjmp	.-20     	; 0xb18 <__ultoa_invert+0x58>
 b2c:	46 2f       	mov	r20, r22
 b2e:	4f 70       	andi	r20, 0x0F	; 15
 b30:	40 5d       	subi	r20, 0xD0	; 208
 b32:	4a 33       	cpi	r20, 0x3A	; 58
 b34:	18 f0       	brcs	.+6      	; 0xb3c <__ultoa_invert+0x7c>
 b36:	49 5d       	subi	r20, 0xD9	; 217
 b38:	31 fd       	sbrc	r19, 1
 b3a:	40 52       	subi	r20, 0x20	; 32
 b3c:	41 93       	st	Z+, r20
 b3e:	02 d0       	rcall	.+4      	; 0xb44 <__ultoa_invert+0x84>
 b40:	a9 f7       	brne	.-22     	; 0xb2c <__ultoa_invert+0x6c>
 b42:	ea cf       	rjmp	.-44     	; 0xb18 <__ultoa_invert+0x58>
 b44:	b4 e0       	ldi	r27, 0x04	; 4
 b46:	a6 95       	lsr	r26
 b48:	97 95       	ror	r25
 b4a:	87 95       	ror	r24
 b4c:	77 95       	ror	r23
 b4e:	67 95       	ror	r22
 b50:	ba 95       	dec	r27
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__ultoa_invert+0x86>
 b54:	00 97       	sbiw	r24, 0x00	; 0
 b56:	61 05       	cpc	r22, r1
 b58:	71 05       	cpc	r23, r1
 b5a:	08 95       	ret
 b5c:	9b 01       	movw	r18, r22
 b5e:	ac 01       	movw	r20, r24
 b60:	0a 2e       	mov	r0, r26
 b62:	06 94       	lsr	r0
 b64:	57 95       	ror	r21
 b66:	47 95       	ror	r20
 b68:	37 95       	ror	r19
 b6a:	27 95       	ror	r18
 b6c:	ba 95       	dec	r27
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__ultoa_invert+0xa2>
 b70:	62 0f       	add	r22, r18
 b72:	73 1f       	adc	r23, r19
 b74:	84 1f       	adc	r24, r20
 b76:	95 1f       	adc	r25, r21
 b78:	a0 1d       	adc	r26, r0
 b7a:	08 95       	ret

00000b7c <__prologue_saves__>:
 b7c:	2f 92       	push	r2
 b7e:	3f 92       	push	r3
 b80:	4f 92       	push	r4
 b82:	5f 92       	push	r5
 b84:	6f 92       	push	r6
 b86:	7f 92       	push	r7
 b88:	8f 92       	push	r8
 b8a:	9f 92       	push	r9
 b8c:	af 92       	push	r10
 b8e:	bf 92       	push	r11
 b90:	cf 92       	push	r12
 b92:	df 92       	push	r13
 b94:	ef 92       	push	r14
 b96:	ff 92       	push	r15
 b98:	0f 93       	push	r16
 b9a:	1f 93       	push	r17
 b9c:	cf 93       	push	r28
 b9e:	df 93       	push	r29
 ba0:	cd b7       	in	r28, 0x3d	; 61
 ba2:	de b7       	in	r29, 0x3e	; 62
 ba4:	ca 1b       	sub	r28, r26
 ba6:	db 0b       	sbc	r29, r27
 ba8:	0f b6       	in	r0, 0x3f	; 63
 baa:	f8 94       	cli
 bac:	de bf       	out	0x3e, r29	; 62
 bae:	0f be       	out	0x3f, r0	; 63
 bb0:	cd bf       	out	0x3d, r28	; 61
 bb2:	09 94       	ijmp

00000bb4 <__epilogue_restores__>:
 bb4:	2a 88       	ldd	r2, Y+18	; 0x12
 bb6:	39 88       	ldd	r3, Y+17	; 0x11
 bb8:	48 88       	ldd	r4, Y+16	; 0x10
 bba:	5f 84       	ldd	r5, Y+15	; 0x0f
 bbc:	6e 84       	ldd	r6, Y+14	; 0x0e
 bbe:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc0:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc2:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc4:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc6:	b9 84       	ldd	r11, Y+9	; 0x09
 bc8:	c8 84       	ldd	r12, Y+8	; 0x08
 bca:	df 80       	ldd	r13, Y+7	; 0x07
 bcc:	ee 80       	ldd	r14, Y+6	; 0x06
 bce:	fd 80       	ldd	r15, Y+5	; 0x05
 bd0:	0c 81       	ldd	r16, Y+4	; 0x04
 bd2:	1b 81       	ldd	r17, Y+3	; 0x03
 bd4:	aa 81       	ldd	r26, Y+2	; 0x02
 bd6:	b9 81       	ldd	r27, Y+1	; 0x01
 bd8:	ce 0f       	add	r28, r30
 bda:	d1 1d       	adc	r29, r1
 bdc:	0f b6       	in	r0, 0x3f	; 63
 bde:	f8 94       	cli
 be0:	de bf       	out	0x3e, r29	; 62
 be2:	0f be       	out	0x3f, r0	; 63
 be4:	cd bf       	out	0x3d, r28	; 61
 be6:	ed 01       	movw	r28, r26
 be8:	08 95       	ret

00000bea <_exit>:
 bea:	f8 94       	cli

00000bec <__stop_program>:
 bec:	ff cf       	rjmp	.-2      	; 0xbec <__stop_program>
